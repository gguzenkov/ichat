{"ast":null,"code":"import { axiosInstance } from '../store/modules/auth';\nexport default {\n  name: 'UserProfile',\n  props: {\n    userId: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  data() {\n    return {\n      user: {}\n    };\n  },\n  async created() {\n    await this.loadUserInfo();\n  },\n  methods: {\n    async loadUserInfo() {\n      try {\n        const response = await axiosInstance.get(`/users/${this.userId}`);\n        this.user = response.data;\n      } catch (error) {\n        console.error('Error loading user info:', error);\n      }\n    },\n    startChat() {\n      this.$router.push(`/chat/${this.userId}`);\n    },\n    formatDate(dateStr) {\n      if (!dateStr) return '';\n      const date = new Date(dateStr);\n      return date.toLocaleDateString('ru-RU', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    }\n  }\n};","map":{"version":3,"names":["axiosInstance","name","props","userId","type","String","Number","required","data","user","created","loadUserInfo","methods","response","get","error","console","startChat","$router","push","formatDate","dateStr","date","Date","toLocaleDateString","year","month","day"],"sources":["/home/dotcore/ichat/frontend/src/components/UserProfile.vue"],"sourcesContent":["<template>\n  <div class=\"user-profile\">\n    <div class=\"profile-card\">\n      <div class=\"profile-header\">\n        <div class=\"avatar-section\">\n          <div v-if=\"user.avatar_url\" class=\"avatar\">\n            <img :src=\"`http://localhost:8000${user.avatar_url}`\" alt=\"Аватар\">\n          </div>\n          <div v-else class=\"avatar default-avatar\">\n            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n            </svg>\n          </div>\n        </div>\n        <h2>{{ user.username }}</h2>\n      </div>\n\n      <div class=\"profile-info\">\n        <div class=\"info-group\">\n          <label>Логин:</label>\n          <span>{{ user.username }}</span>\n        </div>\n        <div class=\"info-group\">\n          <label>E-mail:</label>\n          <span>{{ user.email }}</span>\n        </div>\n        <div class=\"info-group\">\n          <label>Дата регистрации:</label>\n          <span>{{ formatDate(user.created_at) }}</span>\n        </div>\n      </div>\n\n      <div class=\"actions\">\n        <button @click=\"startChat\" class=\"action-btn\">\n          <i class=\"fas fa-envelope\"></i> Написать сообщение\n        </button>\n        <button @click=\"$router.push('/chat')\" class=\"back-btn\">\n          <i class=\"fas fa-arrow-left\"></i> Вернуться в чат\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { axiosInstance } from '../store/modules/auth'\n\nexport default {\n  name: 'UserProfile',\n  props: {\n    userId: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  data() {\n    return {\n      user: {}\n    }\n  },\n  async created() {\n    await this.loadUserInfo()\n  },\n  methods: {\n    async loadUserInfo() {\n      try {\n        const response = await axiosInstance.get(`/users/${this.userId}`)\n        this.user = response.data\n      } catch (error) {\n        console.error('Error loading user info:', error)\n      }\n    },\n    startChat() {\n      this.$router.push(`/chat/${this.userId}`)\n    },\n    formatDate(dateStr) {\n      if (!dateStr) return ''\n      const date = new Date(dateStr)\n      return date.toLocaleDateString('ru-RU', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.user-profile {\n  max-width: 600px;\n  margin: 40px auto;\n  padding: 20px;\n}\n\n.profile-card {\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.profile-header {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.avatar-section {\n  position: relative;\n}\n\n.avatar {\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  overflow: hidden;\n}\n\n.avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.default-avatar {\n  background-color: #e0e0e0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n}\n\n.default-avatar svg {\n  width: 60px;\n  height: 60px;\n  color: #757575;\n}\n\n.profile-info {\n  margin-bottom: 30px;\n}\n\n.info-group {\n  margin-bottom: 15px;\n  display: flex;\n  gap: 10px;\n}\n\n.info-group label {\n  font-weight: bold;\n  color: #666;\n  min-width: 150px;\n}\n\n.actions {\n  display: flex;\n  gap: 10px;\n  justify-content: flex-start;\n  margin-top: 20px;\n}\n\n.action-btn, .back-btn {\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.action-btn {\n  background: #42b983;\n  color: white;\n}\n\n.back-btn {\n  background: #666;\n  color: white;\n}\n\n.action-btn:hover {\n  background: #3aa876;\n}\n\n.back-btn:hover {\n  background: #555;\n}\n</style> "],"mappings":"AA6CA,SAASA,aAAY,QAAS,uBAAsB;AAEpD,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,IAAI,EAAE,CAACC,MAAM,EAAEC,MAAM,CAAC;MACtBC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,CAAC;IACT;EACF,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,YAAY,CAAC;EAC1B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMb,aAAa,CAACc,GAAG,CAAC,UAAU,IAAI,CAACX,MAAM,EAAE;QAChE,IAAI,CAACM,IAAG,GAAII,QAAQ,CAACL,IAAG;MAC1B,EAAE,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK;MACjD;IACF,CAAC;IACDE,SAASA,CAAA,EAAG;MACV,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,SAAS,IAAI,CAAChB,MAAM,EAAE;IAC1C,CAAC;IACDiB,UAAUA,CAACC,OAAO,EAAE;MAClB,IAAI,CAACA,OAAO,EAAE,OAAO,EAAC;MACtB,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,OAAO;MAC7B,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;QACtCC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,MAAM;QACbC,GAAG,EAAE;MACP,CAAC;IACH;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}