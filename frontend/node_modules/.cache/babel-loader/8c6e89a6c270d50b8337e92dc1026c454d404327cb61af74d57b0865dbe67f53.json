{"ast":null,"code":"import { axiosInstance } from '../store/modules/auth';\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      polling: null,\n      loading: false,\n      error: null,\n      showDeleteModal: false,\n      messageToDelete: null\n    };\n  },\n  computed: {\n    userId() {\n      return this.$store.state.auth.userId;\n    }\n  },\n  async created() {\n    await this.loadMessages();\n    this.startPolling();\n  },\n  beforeUnmount() {\n    this.stopPolling();\n  },\n  methods: {\n    startPolling() {\n      this.polling = setInterval(this.loadMessages, 3000);\n    },\n    stopPolling() {\n      if (this.polling) {\n        clearInterval(this.polling);\n        this.polling = null;\n      }\n    },\n    async loadMessages() {\n      try {\n        const response = await axiosInstance.get('/messages');\n        if (response.data) {\n          this.messages = response.data;\n          this.$nextTick(() => {\n            this.scrollToBottom();\n          });\n        }\n      } catch (error) {\n        console.error('Error loading messages:', error);\n        this.error = 'Ошибка при загрузке сообщений';\n      }\n    },\n    async sendMessage() {\n      if (!this.newMessage.trim() || this.loading) return;\n      this.loading = true;\n      try {\n        const messageData = {\n          content: this.newMessage.trim(),\n          user_id: parseInt(this.userId)\n        };\n        await axiosInstance.post('/messages', messageData);\n        this.newMessage = '';\n        await this.loadMessages();\n      } catch (error) {\n        console.error('Error sending message:', error);\n        alert('Ошибка при отправке сообщения');\n      } finally {\n        this.loading = false;\n      }\n    },\n    formatDate(dateStr) {\n      if (!dateStr) return '';\n      try {\n        const date = new Date(dateStr);\n        return date.toLocaleString('ru-RU', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          timeZone: 'Europe/Moscow'\n        });\n      } catch (e) {\n        console.error('Error formatting date:', e);\n        return 'Некорректная дата';\n      }\n    },\n    scrollToBottom() {\n      const container = this.$refs.messagesContainer;\n      if (container) {\n        container.scrollTop = container.scrollHeight;\n      }\n    },\n    canDeleteMessage(message) {\n      return message.user_id === parseInt(this.userId);\n    },\n    confirmDelete(message) {\n      this.messageToDelete = message;\n      this.showDeleteModal = true;\n    },\n    cancelDelete() {\n      this.messageToDelete = null;\n      this.showDeleteModal = false;\n    },\n    async deleteMessage() {\n      if (!this.messageToDelete) return;\n      try {\n        await axiosInstance.delete(`/messages/${this.messageToDelete.id}`, {\n          data: {\n            current_user_id: parseInt(this.userId)\n          }\n        });\n        await this.loadMessages();\n        this.showDeleteModal = false;\n        this.messageToDelete = null;\n      } catch (error) {\n        console.error('Error deleting message:', error);\n        alert('Ошибка при удалении сообщения');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axiosInstance","name","data","messages","newMessage","polling","loading","error","showDeleteModal","messageToDelete","computed","userId","$store","state","auth","created","loadMessages","startPolling","beforeUnmount","stopPolling","methods","setInterval","clearInterval","response","get","$nextTick","scrollToBottom","console","sendMessage","trim","messageData","content","user_id","parseInt","post","alert","formatDate","dateStr","date","Date","toLocaleString","year","month","day","hour","minute","timeZone","e","container","$refs","messagesContainer","scrollTop","scrollHeight","canDeleteMessage","message","confirmDelete","cancelDelete","deleteMessage","delete","id","current_user_id"],"sources":["/home/dotcore/ichat/frontend/src/components/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat\">\n    <div class=\"chat-messages\" ref=\"messagesContainer\">\n      <div v-if=\"messages.length === 0\" class=\"no-messages\">\n        Нет сообщений\n      </div>\n      <div v-else v-for=\"message in messages\" :key=\"message.id\" class=\"message\">\n        <div class=\"message-header\">\n          <span class=\"username\">{{ message.username }}</span>\n          <span class=\"timestamp\">{{ formatDate(message.created_at) }}</span>\n          <button \n            v-if=\"canDeleteMessage(message)\" \n            @click=\"confirmDelete(message)\"\n            class=\"delete-btn\"\n          >\n            ✕\n          </button>\n        </div>\n        <div class=\"message-content\">{{ message.content }}</div>\n      </div>\n    </div>\n    <div class=\"chat-input\">\n      <input \n        v-model=\"newMessage\" \n        @keyup.enter=\"sendMessage\"\n        placeholder=\"Введите сообщение...\"\n        :disabled=\"loading\"\n      >\n      <button @click=\"sendMessage\" :disabled=\"!newMessage.trim() || loading\">\n        {{ loading ? 'Отправка...' : 'Отправить' }}\n      </button>\n    </div>\n\n    <div v-if=\"showDeleteModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h3>Подтверждение удаления</h3>\n        <p>Вы действительно хотите удалить это сообщение?</p>\n        <div class=\"modal-buttons\">\n          <button @click=\"deleteMessage\" class=\"delete-confirm-btn\">Удалить</button>\n          <button @click=\"cancelDelete\" class=\"cancel-btn\">Отмена</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { axiosInstance } from '../store/modules/auth'\n\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      polling: null,\n      loading: false,\n      error: null,\n      showDeleteModal: false,\n      messageToDelete: null\n    }\n  },\n  computed: {\n    userId() {\n      return this.$store.state.auth.userId\n    }\n  },\n  async created() {\n    await this.loadMessages()\n    this.startPolling()\n  },\n  beforeUnmount() {\n    this.stopPolling()\n  },\n  methods: {\n    startPolling() {\n      this.polling = setInterval(this.loadMessages, 3000)\n    },\n    stopPolling() {\n      if (this.polling) {\n        clearInterval(this.polling)\n        this.polling = null\n      }\n    },\n    async loadMessages() {\n      try {\n        const response = await axiosInstance.get('/messages')\n        if (response.data) {\n          this.messages = response.data\n          this.$nextTick(() => {\n            this.scrollToBottom()\n          })\n        }\n      } catch (error) {\n        console.error('Error loading messages:', error)\n        this.error = 'Ошибка при загрузке сообщений'\n      }\n    },\n    async sendMessage() {\n      if (!this.newMessage.trim() || this.loading) return\n\n      this.loading = true\n      try {\n        const messageData = {\n          content: this.newMessage.trim(),\n          user_id: parseInt(this.userId)\n        }\n        await axiosInstance.post('/messages', messageData)\n        this.newMessage = ''\n        await this.loadMessages()\n      } catch (error) {\n        console.error('Error sending message:', error)\n        alert('Ошибка при отправке сообщения')\n      } finally {\n        this.loading = false\n      }\n    },\n    formatDate(dateStr) {\n      if (!dateStr) return ''\n      try {\n        const date = new Date(dateStr)\n        return date.toLocaleString('ru-RU', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          timeZone: 'Europe/Moscow'\n        })\n      } catch (e) {\n        console.error('Error formatting date:', e)\n        return 'Некорректная дата'\n      }\n    },\n    scrollToBottom() {\n      const container = this.$refs.messagesContainer\n      if (container) {\n        container.scrollTop = container.scrollHeight\n      }\n    },\n    canDeleteMessage(message) {\n      return message.user_id === parseInt(this.userId)\n    },\n    confirmDelete(message) {\n      this.messageToDelete = message\n      this.showDeleteModal = true\n    },\n    cancelDelete() {\n      this.messageToDelete = null\n      this.showDeleteModal = false\n    },\n    async deleteMessage() {\n      if (!this.messageToDelete) return\n\n      try {\n        await axiosInstance.delete(`/messages/${this.messageToDelete.id}`, {\n          data: { current_user_id: parseInt(this.userId) }\n        })\n        await this.loadMessages()\n        this.showDeleteModal = false\n        this.messageToDelete = null\n      } catch (error) {\n        console.error('Error deleting message:', error)\n        alert('Ошибка при удалении сообщения')\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat {\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 100px);\n  padding: 20px;\n}\n\n.chat-messages {\n  flex-grow: 1;\n  overflow-y: auto;\n  margin-bottom: 20px;\n  padding: 10px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.no-messages {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n}\n\n.message {\n  margin-bottom: 15px;\n  padding: 10px;\n  background: #f5f5f5;\n  border-radius: 4px;\n}\n\n.message-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 5px;\n  font-size: 0.9em;\n}\n\n.username {\n  font-weight: bold;\n  color: #42b983;\n}\n\n.timestamp {\n  color: #666;\n}\n\n.message-content {\n  word-break: break-word;\n}\n\n.chat-input {\n  display: flex;\n  gap: 10px;\n}\n\ninput {\n  flex-grow: 1;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\ninput:disabled {\n  background-color: #f5f5f5;\n  cursor: not-allowed;\n}\n\n.chat-input button {\n  min-width: 100px;\n  padding: 10px 20px;\n  background: #42b983;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.chat-input button:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.delete-btn {\n  background: none;\n  border: none;\n  color: #999;\n  cursor: pointer;\n  font-size: 16px;\n  padding: 0 5px;\n  opacity: 0.6;\n}\n\n.delete-btn:hover {\n  opacity: 1;\n  color: #ff4444;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 300px;\n  text-align: center;\n}\n\n.modal-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.delete-confirm-btn {\n  background: #ff4444;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.delete-confirm-btn:hover {\n  background: #ff2222;\n}\n\n.cancel-btn {\n  background: #666;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.cancel-btn:hover {\n  background: #555;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}