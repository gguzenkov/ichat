{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000/api';\nexport default {\n  namespaced: true,\n  state: {\n    isAuthenticated: false,\n    user: null,\n    token: null,\n    error: null\n  },\n  mutations: {\n    SET_AUTH(state, auth) {\n      state.isAuthenticated = auth.isAuthenticated;\n      state.user = auth.user;\n      state.token = auth.token;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    },\n    CLEAR_ERROR(state) {\n      state.error = null;\n    }\n  },\n  actions: {\n    async register({\n      commit\n    }, userData) {\n      try {\n        commit('CLEAR_ERROR');\n        const response = await axios.post(`${API_URL}/register`, {\n          username: userData.username,\n          email: userData.email,\n          password: userData.password\n        });\n        console.log('Registration successful:', response.data);\n        return response.data;\n      } catch (error) {\n        const errorMessage = error.response?.data?.detail || 'Ошибка при регистрации';\n        commit('SET_ERROR', errorMessage);\n        throw new Error(errorMessage);\n      }\n    },\n    async login({\n      commit\n    }, credentials) {\n      try {\n        commit('CLEAR_ERROR');\n        const formData = new FormData();\n        formData.append('username', credentials.username);\n        formData.append('password', credentials.password);\n        const response = await axios.post(`${API_URL}/login`, formData);\n        const {\n          access_token,\n          username\n        } = response.data;\n        commit('SET_AUTH', {\n          isAuthenticated: true,\n          user: username,\n          token: access_token\n        });\n        localStorage.setItem('token', access_token);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n        return response.data;\n      } catch (error) {\n        const errorMessage = error.response?.data?.detail || 'Ошибка при входе';\n        commit('SET_ERROR', errorMessage);\n        throw new Error(errorMessage);\n      }\n    },\n    logout({\n      commit\n    }) {\n      localStorage.removeItem('token');\n      delete axios.defaults.headers.common['Authorization'];\n      commit('SET_AUTH', {\n        isAuthenticated: false,\n        user: null,\n        token: null\n      });\n    }\n  },\n  getters: {\n    isAuthenticated: state => state.isAuthenticated,\n    currentUser: state => state.user,\n    authError: state => state.error\n  }\n};","map":{"version":3,"names":["axios","API_URL","namespaced","state","isAuthenticated","user","token","error","mutations","SET_AUTH","auth","SET_ERROR","CLEAR_ERROR","actions","register","commit","userData","response","post","username","email","password","console","log","data","errorMessage","detail","Error","login","credentials","formData","FormData","append","access_token","localStorage","setItem","defaults","headers","common","logout","removeItem","getters","currentUser","authError"],"sources":["/home/dotcore/ichat/frontend/src/store/modules/auth.js"],"sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'http://localhost:8000/api'\n\nexport default {\n  namespaced: true,\n  \n  state: {\n    isAuthenticated: false,\n    user: null,\n    token: null,\n    error: null\n  },\n\n  mutations: {\n    SET_AUTH(state, auth) {\n      state.isAuthenticated = auth.isAuthenticated\n      state.user = auth.user\n      state.token = auth.token\n    },\n    SET_ERROR(state, error) {\n      state.error = error\n    },\n    CLEAR_ERROR(state) {\n      state.error = null\n    }\n  },\n\n  actions: {\n    async register({ commit }, userData) {\n      try {\n        commit('CLEAR_ERROR')\n        const response = await axios.post(`${API_URL}/register`, {\n          username: userData.username,\n          email: userData.email,\n          password: userData.password\n        })\n        \n        console.log('Registration successful:', response.data)\n        return response.data\n      } catch (error) {\n        const errorMessage = error.response?.data?.detail || 'Ошибка при регистрации'\n        commit('SET_ERROR', errorMessage)\n        throw new Error(errorMessage)\n      }\n    },\n\n    async login({ commit }, credentials) {\n      try {\n        commit('CLEAR_ERROR')\n        const formData = new FormData()\n        formData.append('username', credentials.username)\n        formData.append('password', credentials.password)\n\n        const response = await axios.post(`${API_URL}/login`, formData)\n        const { access_token, username } = response.data\n        \n        commit('SET_AUTH', {\n          isAuthenticated: true,\n          user: username,\n          token: access_token\n        })\n        \n        localStorage.setItem('token', access_token)\n        axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`\n        \n        return response.data\n      } catch (error) {\n        const errorMessage = error.response?.data?.detail || 'Ошибка при входе'\n        commit('SET_ERROR', errorMessage)\n        throw new Error(errorMessage)\n      }\n    },\n\n    logout({ commit }) {\n      localStorage.removeItem('token')\n      delete axios.defaults.headers.common['Authorization']\n      commit('SET_AUTH', {\n        isAuthenticated: false,\n        user: null,\n        token: null\n      })\n    }\n  },\n\n  getters: {\n    isAuthenticated: state => state.isAuthenticated,\n    currentUser: state => state.user,\n    authError: state => state.error\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}