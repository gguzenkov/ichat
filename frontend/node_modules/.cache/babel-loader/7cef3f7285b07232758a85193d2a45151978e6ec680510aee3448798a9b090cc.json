{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat\"\n};\nconst _hoisted_2 = {\n  class: \"chat-messages\",\n  ref: \"messagesContainer\"\n};\nconst _hoisted_3 = {\n  class: \"message-header\"\n};\nconst _hoisted_4 = {\n  class: \"username\"\n};\nconst _hoisted_5 = {\n  class: \"timestamp\"\n};\nconst _hoisted_6 = {\n  class: \"message-content\"\n};\nconst _hoisted_7 = {\n  class: \"chat-input\"\n};\nconst _hoisted_8 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: \"message\"\n    }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", _hoisted_4, _toDisplayString(message.username), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_5, _toDisplayString($options.formatDate(message.created_at)), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_6, _toDisplayString(message.content), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_7, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    placeholder: \"Введите сообщение...\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.newMessage]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args)),\n    disabled: !$data.newMessage.trim()\n  }, \"Отправить\", 8 /* PROPS */, _hoisted_8)])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","messages","message","key","id","_hoisted_3","_hoisted_4","_toDisplayString","username","_hoisted_5","$options","formatDate","created_at","_hoisted_6","content","_hoisted_7","_cache","$event","newMessage","onKeyup","_withKeys","args","sendMessage","placeholder","onClick","disabled","trim","_hoisted_8"],"sources":["/home/dotcore/ichat/frontend/src/components/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat\">\n    <div class=\"chat-messages\" ref=\"messagesContainer\">\n      <div v-for=\"message in messages\" :key=\"message.id\" class=\"message\">\n        <div class=\"message-header\">\n          <span class=\"username\">{{ message.username }}</span>\n          <span class=\"timestamp\">{{ formatDate(message.created_at) }}</span>\n        </div>\n        <div class=\"message-content\">{{ message.content }}</div>\n      </div>\n    </div>\n    <div class=\"chat-input\">\n      <input \n        v-model=\"newMessage\" \n        @keyup.enter=\"sendMessage\"\n        placeholder=\"Введите сообщение...\"\n      >\n      <button @click=\"sendMessage\" :disabled=\"!newMessage.trim()\">Отправить</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      polling: null\n    }\n  },\n  async created() {\n    await this.loadMessages()\n    // Опрашиваем сервер каждые 3 секунды\n    this.polling = setInterval(this.loadMessages, 3000)\n  },\n  beforeUnmount() {\n    // Очищаем интервал при уничтожении компонента\n    clearInterval(this.polling)\n  },\n  methods: {\n    async loadMessages() {\n      try {\n        const response = await axios.get('http://localhost:8000/api/messages')\n        this.messages = response.data\n        this.$nextTick(() => {\n          this.scrollToBottom()\n        })\n      } catch (error) {\n        console.error('Error loading messages:', error)\n      }\n    },\n    async sendMessage() {\n      if (!this.newMessage.trim()) return\n\n      try {\n        const userId = this.$store.state.auth.user.id\n        await axios.post('http://localhost:8000/api/messages', {\n          content: this.newMessage,\n          user_id: userId\n        })\n        this.newMessage = ''\n        await this.loadMessages()\n      } catch (error) {\n        console.error('Error sending message:', error)\n      }\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleString()\n    },\n    scrollToBottom() {\n      const container = this.$refs.messagesContainer\n      container.scrollTop = container.scrollHeight\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat {\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 100px);\n  padding: 20px;\n}\n\n.chat-messages {\n  flex-grow: 1;\n  overflow-y: auto;\n  margin-bottom: 20px;\n  padding: 10px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.message {\n  margin-bottom: 15px;\n  padding: 10px;\n  background: #f5f5f5;\n  border-radius: 4px;\n}\n\n.message-header {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 5px;\n  font-size: 0.9em;\n}\n\n.username {\n  font-weight: bold;\n  color: #42b983;\n}\n\n.timestamp {\n  color: #666;\n}\n\n.message-content {\n  word-break: break-word;\n}\n\n.chat-input {\n  display: flex;\n  gap: 10px;\n}\n\ninput {\n  flex-grow: 1;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\nbutton {\n  padding: 10px 20px;\n  background: #42b983;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:disabled {\n  background: #ccc;\n  cursor: not-allowed;\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC,eAAe;EAACC,GAAG,EAAC;;;EAEtBD,KAAK,EAAC;AAAgB;;EACnBA,KAAK,EAAC;AAAU;;EAChBA,KAAK,EAAC;AAAW;;EAEpBA,KAAK,EAAC;AAAiB;;EAG3BA,KAAK,EAAC;AAAY;mBAX3B;;uBACEE,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJC,mBAAA,CAQM,OARNC,UAQM,I,kBAPJH,mBAAA,CAMMI,SAAA,QATZC,WAAA,CAG6BC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAnBR,mBAAA,CAMM;MAN4BS,GAAG,EAAED,OAAO,CAACE,EAAE;MAAEZ,KAAK,EAAC;QACvDI,mBAAA,CAGM,OAHNS,UAGM,GAFJT,mBAAA,CAAoD,QAApDU,UAAoD,EAAAC,gBAAA,CAA1BL,OAAO,CAACM,QAAQ,kBAC1CZ,mBAAA,CAAmE,QAAnEa,UAAmE,EAAAF,gBAAA,CAAxCG,QAAA,CAAAC,UAAU,CAACT,OAAO,CAACU,UAAU,kB,GAE1DhB,mBAAA,CAAwD,OAAxDiB,UAAwD,EAAAN,gBAAA,CAAxBL,OAAO,CAACY,OAAO,iB;0DAGnDlB,mBAAA,CAOM,OAPNmB,UAOM,G,gBANJnB,mBAAA,CAIC;IAhBP,uBAAAoB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAaiBjB,KAAA,CAAAkB,UAAU,GAAAD,MAAA;IAClBE,OAAK,EAAAH,MAAA,QAAAA,MAAA,MAddI,SAAA,KAAAC,IAAA,KAcsBX,QAAA,CAAAY,WAAA,IAAAZ,QAAA,CAAAY,WAAA,IAAAD,IAAA,CAAW;IACzBE,WAAW,EAAC;iEAFHvB,KAAA,CAAAkB,UAAU,E,GAIrBtB,mBAAA,CAA8E;IAArE4B,OAAK,EAAAR,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEX,QAAA,CAAAY,WAAA,IAAAZ,QAAA,CAAAY,WAAA,IAAAD,IAAA,CAAW;IAAGI,QAAQ,GAAGzB,KAAA,CAAAkB,UAAU,CAACQ,IAAI;KAAI,WAAS,iBAjB3EC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}