{"ast":null,"code":"import { axiosInstance } from '../store/modules/auth';\nimport PopupChat from './PopupChat.vue';\nexport default {\n  name: 'Chat',\n  components: {\n    PopupChat\n  },\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      polling: null,\n      loading: false,\n      error: null,\n      showDeleteModal: false,\n      messageToDelete: null,\n      activeUsers: [],\n      showContextMenu: false,\n      contextMenuPosition: {\n        x: 0,\n        y: 0\n      },\n      selectedUser: null,\n      activeChats: [],\n      unreadCounts: {},\n      unreadPolling: null,\n      readMessagesByUser: {},\n      showAllMessages: false,\n      privateChats: [],\n      showMentionPopup: false,\n      mentionFilter: '',\n      mentionStartIndex: -1\n    };\n  },\n  computed: {\n    userId() {\n      return this.$store.state.auth.userId;\n    },\n    totalUnreadCount() {\n      return Object.values(this.unreadCounts).reduce((sum, count) => sum + count, 0);\n    },\n    filteredUsers() {\n      if (!this.mentionFilter) return this.activeUsers;\n      const filter = this.mentionFilter.toLowerCase();\n      return this.activeUsers.filter(user => user.username.toLowerCase().includes(filter));\n    },\n    sortedMessages() {\n      return [...this.messages].sort((a, b) => {\n        return new Date(a.created_at) - new Date(b.created_at);\n      });\n    }\n  },\n  async created() {\n    await this.loadMessages();\n    await this.loadActiveUsers();\n    this.startPolling();\n    this.startUsersPolling();\n    this.startActivityTracking();\n    await this.updateUserActivity();\n    this.startUnreadPolling();\n  },\n  beforeUnmount() {\n    this.stopPolling();\n    this.stopUsersPolling();\n    this.stopActivityTracking();\n    document.removeEventListener('click', this.hideContextMenu);\n    this.stopUnreadPolling();\n  },\n  mounted() {\n    // Закрываем меню при клике вне его\n    document.addEventListener('click', this.hideContextMenu);\n  },\n  methods: {\n    startPolling() {\n      this.polling = setInterval(this.loadMessages, 3000);\n    },\n    stopPolling() {\n      if (this.polling) {\n        clearInterval(this.polling);\n        this.polling = null;\n      }\n    },\n    async loadMessages() {\n      try {\n        const response = await axiosInstance.get('/messages');\n        if (response.data) {\n          // Сохраняем текущую позицию прокрутки и высоту контента\n          const container = this.$refs.messagesContainer;\n          const wasAtBottom = container ? container.scrollHeight - container.scrollTop - container.clientHeight < 50 : false;\n          const oldScrollHeight = container ? container.scrollHeight : 0;\n          this.messages = response.data;\n\n          // После обновления DOM прокручиваем к нужной позиции\n          this.$nextTick(() => {\n            if (wasAtBottom) {\n              // Если были внизу, прокручиваем к новым сообщениям\n              this.scrollToBottom();\n            } else if (container) {\n              // Иначе сохраняем текущую позицию просмотра\n              container.scrollTop = container.scrollHeight - oldScrollHeight;\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error loading messages:', error);\n        this.error = 'Ошибка при загрузке сообщений';\n      }\n    },\n    async sendMessage() {\n      if (!this.newMessage.trim() || this.loading) return;\n      this.loading = true;\n      try {\n        const messageData = {\n          content: this.newMessage.trim(),\n          user_id: parseInt(this.userId)\n        };\n        await axiosInstance.post('/messages', messageData);\n        await this.updateUserActivity();\n        this.newMessage = '';\n        await this.loadMessages();\n        // Всегда прокручиваем к низу при отправке своего сообщения\n        this.scrollToBottom();\n      } catch (error) {\n        console.error('Error sending message:', error);\n        alert('Ошибка при отправке сообщения');\n      } finally {\n        this.loading = false;\n      }\n    },\n    formatDate(dateStr) {\n      if (!dateStr) return '';\n      try {\n        const date = new Date(dateStr);\n        return date.toLocaleString('ru-RU', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          timeZone: 'Europe/Moscow'\n        });\n      } catch (e) {\n        console.error('Error formatting date:', e);\n        return 'Некорректная дата';\n      }\n    },\n    scrollToBottom() {\n      const container = this.$refs.messagesContainer;\n      if (container) {\n        container.scrollTop = container.scrollHeight;\n      }\n    },\n    canDeleteMessage(message) {\n      return message.user_id === parseInt(this.userId);\n    },\n    confirmDelete(message) {\n      this.messageToDelete = message;\n      this.showDeleteModal = true;\n    },\n    cancelDelete() {\n      this.messageToDelete = null;\n      this.showDeleteModal = false;\n    },\n    async deleteMessage() {\n      if (!this.messageToDelete) return;\n      try {\n        await axiosInstance.delete(`/messages/${this.messageToDelete.id}?current_user_id=${this.userId}`);\n        await this.loadMessages();\n        this.showDeleteModal = false;\n        this.messageToDelete = null;\n      } catch (error) {\n        console.error('Error deleting message:', error);\n        alert('Ошибка при удалении сообщения');\n      }\n    },\n    async loadActiveUsers() {\n      try {\n        const response = await axiosInstance.get('/users/active');\n        this.activeUsers = response.data;\n      } catch (error) {\n        console.error('Error loading active users:', error);\n      }\n    },\n    startUsersPolling() {\n      this.usersPolling = setInterval(this.loadActiveUsers, 10000);\n    },\n    stopUsersPolling() {\n      if (this.usersPolling) {\n        clearInterval(this.usersPolling);\n        this.usersPolling = null;\n      }\n    },\n    async updateUserActivity() {\n      try {\n        await axiosInstance.post(`/users/${this.userId}/heartbeat`);\n      } catch (error) {\n        console.error('Error updating user activity:', error);\n      }\n    },\n    startActivityTracking() {\n      this.activityInterval = setInterval(this.updateUserActivity, 30000);\n      window.addEventListener('mousemove', this.updateUserActivity);\n      window.addEventListener('keydown', this.updateUserActivity);\n    },\n    stopActivityTracking() {\n      if (this.activityInterval) {\n        clearInterval(this.activityInterval);\n        this.activityInterval = null;\n      }\n      window.removeEventListener('mousemove', this.updateUserActivity);\n      window.removeEventListener('keydown', this.updateUserActivity);\n    },\n    showUserMenu(user, event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.selectedUser = user;\n      this.contextMenuPosition = {\n        x: event.clientX,\n        y: event.clientY\n      };\n      this.showContextMenu = true;\n    },\n    hideContextMenu(event) {\n      if (!event.target.closest('.user-context-menu')) {\n        this.showContextMenu = false;\n      }\n    },\n    mentionUser() {\n      if (this.selectedUser) {\n        this.newMessage = `${this.newMessage}@${this.selectedUser.username} `;\n        this.$refs.messageInput?.focus();\n      }\n      this.showContextMenu = false;\n    },\n    async openPrivateChat(user) {\n      const userId = user.id;\n      if (!this.activeChats.find(chat => chat.userId === userId)) {\n        this.activeChats.push({\n          userId\n        });\n        try {\n          const response = await axiosInstance.get(`/private-messages/${userId}`, {\n            headers: {\n              'X-Current-User-Id': this.userId\n            }\n          });\n          const unreadMessages = response.data.filter(msg => msg.receiver_id === this.userId && !msg.is_read);\n\n          // Отмечаем все непрочитанные сообщения как прочитанные\n          for (const msg of unreadMessages) {\n            await axiosInstance.put(`/private-messages/${msg.id}/read`, null, {\n              headers: {\n                'X-Current-User-Id': this.userId\n              }\n            });\n          }\n\n          // Сохраняем последнее прочитанное время для этого пользователя\n          this.readMessagesByUser[userId] = new Date().toISOString();\n          await this.loadUnreadCounts();\n        } catch (error) {\n          console.error('Error marking messages as read:', error);\n        }\n      }\n\n      // Закрываем окно списка личных сообщений\n      this.showAllMessages = false;\n    },\n    sendPrivateMessage() {\n      this.openPrivateChat(this.selectedUser);\n      this.showContextMenu = false;\n    },\n    viewProfile() {\n      this.$router.push(`/profile/${this.selectedUser.id}`);\n      this.showContextMenu = false;\n    },\n    closeChat(userId) {\n      // Сохраняем время закрытия чата как время последнего прочтения\n      this.readMessagesByUser[userId] = new Date().toISOString();\n      this.activeChats = this.activeChats.filter(chat => chat.userId !== userId);\n      this.loadUnreadCounts();\n    },\n    async loadUnreadCounts() {\n      try {\n        const response = await axiosInstance.get('/private-messages-unread', {\n          headers: {\n            'X-Current-User-Id': this.userId\n          }\n        });\n\n        // Получаем все сообщения для каждого пользователя с непрочитанными сообщениями\n        const counts = {\n          ...response.data\n        };\n\n        // Проверяем каждого пользователя с непрочитанными сообщениями\n        for (const userId in counts) {\n          try {\n            const messagesResponse = await axiosInstance.get(`/private-messages/${userId}`, {\n              headers: {\n                'X-Current-User-Id': this.userId\n              }\n            });\n\n            // Фильтруем только те сообщения, которые пришли после последнего прочтения\n            const lastReadTime = this.readMessagesByUser[userId];\n            if (lastReadTime) {\n              const unreadCount = messagesResponse.data.filter(msg => msg.receiver_id === this.userId && msg.created_at > lastReadTime).length;\n              if (unreadCount === 0) {\n                delete counts[userId];\n              } else {\n                counts[userId] = unreadCount;\n              }\n            }\n          } catch (error) {\n            console.error('Error loading messages for user:', userId, error);\n          }\n        }\n\n        // Исключаем открытые чаты\n        this.activeChats.forEach(chat => {\n          delete counts[chat.userId];\n        });\n        this.unreadCounts = counts;\n      } catch (error) {\n        console.error('Error loading unread counts:', error);\n      }\n    },\n    startUnreadPolling() {\n      this.loadUnreadCounts();\n      this.unreadPolling = setInterval(this.loadUnreadCounts, 3000);\n    },\n    stopUnreadPolling() {\n      if (this.unreadPolling) {\n        clearInterval(this.unreadPolling);\n        this.unreadPolling = null;\n      }\n    },\n    async toggleAllMessages() {\n      this.showAllMessages = !this.showAllMessages;\n      if (this.showAllMessages) {\n        await this.loadPrivateChats();\n      }\n    },\n    async loadPrivateChats() {\n      try {\n        const response = await axiosInstance.get('/pm-chats', {\n          headers: {\n            'X-Current-User-Id': this.userId\n          }\n        });\n        this.privateChats = response.data;\n        console.log('Loaded chats:', this.privateChats); // Для отладки\n      } catch (error) {\n        console.error('Error loading private chats:', error);\n      }\n    },\n    handleInput(event) {\n      const text = event.target.value;\n      const lastAtIndex = text.lastIndexOf('@');\n      if (lastAtIndex !== -1 && (lastAtIndex === 0 || text[lastAtIndex - 1] === ' ')) {\n        this.mentionStartIndex = lastAtIndex;\n        this.mentionFilter = text.slice(lastAtIndex + 1);\n        this.showMentionPopup = true;\n      } else if (this.showMentionPopup && this.mentionStartIndex !== -1) {\n        this.mentionFilter = text.slice(this.mentionStartIndex + 1);\n        if (!this.mentionFilter || text[this.mentionStartIndex] !== '@') {\n          this.closeMentionPopup();\n        }\n      }\n    },\n    handleKeydown(event) {\n      if (!this.showMentionPopup) return;\n      if (event.key === 'Escape') {\n        this.closeMentionPopup();\n      }\n    },\n    selectMention(user) {\n      const beforeMention = this.newMessage.slice(0, this.mentionStartIndex);\n      const afterMention = this.newMessage.slice(this.mentionStartIndex + this.mentionFilter.length + 1);\n      this.newMessage = `${beforeMention}@${user.username} ${afterMention}`;\n      this.closeMentionPopup();\n      this.$refs.messageInput.focus();\n    },\n    closeMentionPopup() {\n      this.showMentionPopup = false;\n      this.mentionFilter = '';\n      this.mentionStartIndex = -1;\n    }\n  }\n};","map":{"version":3,"names":["axiosInstance","PopupChat","name","components","data","messages","newMessage","polling","loading","error","showDeleteModal","messageToDelete","activeUsers","showContextMenu","contextMenuPosition","x","y","selectedUser","activeChats","unreadCounts","unreadPolling","readMessagesByUser","showAllMessages","privateChats","showMentionPopup","mentionFilter","mentionStartIndex","computed","userId","$store","state","auth","totalUnreadCount","Object","values","reduce","sum","count","filteredUsers","filter","toLowerCase","user","username","includes","sortedMessages","sort","a","b","Date","created_at","created","loadMessages","loadActiveUsers","startPolling","startUsersPolling","startActivityTracking","updateUserActivity","startUnreadPolling","beforeUnmount","stopPolling","stopUsersPolling","stopActivityTracking","document","removeEventListener","hideContextMenu","stopUnreadPolling","mounted","addEventListener","methods","setInterval","clearInterval","response","get","container","$refs","messagesContainer","wasAtBottom","scrollHeight","scrollTop","clientHeight","oldScrollHeight","$nextTick","scrollToBottom","console","sendMessage","trim","messageData","content","user_id","parseInt","post","alert","formatDate","dateStr","date","toLocaleString","year","month","day","hour","minute","timeZone","e","canDeleteMessage","message","confirmDelete","cancelDelete","deleteMessage","delete","id","usersPolling","activityInterval","window","showUserMenu","event","preventDefault","stopPropagation","clientX","clientY","target","closest","mentionUser","messageInput","focus","openPrivateChat","find","chat","push","headers","unreadMessages","msg","receiver_id","is_read","put","toISOString","loadUnreadCounts","sendPrivateMessage","viewProfile","$router","closeChat","counts","messagesResponse","lastReadTime","unreadCount","length","forEach","toggleAllMessages","loadPrivateChats","log","handleInput","text","value","lastAtIndex","lastIndexOf","slice","closeMentionPopup","handleKeydown","key","selectMention","beforeMention","afterMention"],"sources":["/home/dotcore/ichat/frontend/src/components/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <div class=\"chat\">\n      <div class=\"chat-messages\" ref=\"messagesContainer\">\n        <div v-if=\"messages.length === 0\" class=\"no-messages\">\n          Нет сообщений\n        </div>\n        <div v-else v-for=\"message in sortedMessages\" :key=\"message.id\" class=\"message\">\n          <div class=\"message-header\">\n            <div class=\"user-info\">\n              <div v-if=\"message.avatar_url\" class=\"message-avatar\">\n                <img \n                  :src=\"`http://localhost:8000${message.avatar_url}`\" \n                  alt=\"Аватар\"\n                >\n              </div>\n              <div v-else class=\"message-avatar default-avatar\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n                </svg>\n              </div>\n              <span class=\"username\">{{ message.username }}</span>\n            </div>\n            <div class=\"message-controls\">\n              <span class=\"timestamp\">{{ formatDate(message.created_at) }}</span>\n              <button \n                v-if=\"canDeleteMessage(message)\" \n                @click=\"confirmDelete(message)\"\n                class=\"delete-btn\"\n              >\n                ✕\n              </button>\n            </div>\n          </div>\n          <div class=\"message-content\">{{ message.content }}</div>\n        </div>\n      </div>\n      <div class=\"chat-input\">\n        <div class=\"mention-popup\" v-if=\"showMentionPopup\" ref=\"mentionPopup\">\n          <div \n            v-for=\"user in filteredUsers\" \n            :key=\"user.id\" \n            class=\"mention-item\"\n            @click=\"selectMention(user)\"\n          >\n            <div v-if=\"user.avatar_url\" class=\"mention-avatar\">\n              <img :src=\"`http://localhost:8000${user.avatar_url}`\" alt=\"Аватар\">\n            </div>\n            <div v-else class=\"mention-avatar default-avatar\">\n              <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n              </svg>\n            </div>\n            <span class=\"mention-username\">{{ user.username }}</span>\n          </div>\n        </div>\n        <input \n          v-model=\"newMessage\" \n          @keyup.enter=\"sendMessage\"\n          @input=\"handleInput\"\n          @keydown=\"handleKeydown\"\n          placeholder=\"Введите сообщение...\"\n          :disabled=\"loading\"\n          ref=\"messageInput\"\n        >\n        <button @click=\"sendMessage\" :disabled=\"!newMessage.trim() || loading\">\n          {{ loading ? 'Отправка...' : 'Отправить' }}\n        </button>\n      </div>\n\n      <div v-if=\"showDeleteModal\" class=\"modal\">\n        <div class=\"modal-content\">\n          <h3>Подтверждение удаления</h3>\n          <p>Вы действительно хотите удалить это сообщение?</p>\n          <div class=\"modal-buttons\">\n            <button @click=\"deleteMessage\" class=\"delete-confirm-btn\">Удалить</button>\n            <button @click=\"cancelDelete\" class=\"cancel-btn\">Отмена</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"users-list\">\n      <h3>Участники чата</h3>\n      <div class=\"users\">\n        <div v-for=\"user in activeUsers\" :key=\"user.id\" class=\"user-item\" @click=\"showUserMenu(user, $event)\">\n          <div v-if=\"user.avatar_url\" class=\"user-avatar\">\n            <img \n              :src=\"`http://localhost:8000${user.avatar_url}`\" \n              alt=\"Аватар\"\n            >\n          </div>\n          <div v-else class=\"user-avatar default-avatar\">\n            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n            </svg>\n          </div>\n          <div class=\"user-info-container\">\n            <span class=\"user-status\"></span>\n            <span class=\"user-name\">{{ user.username }}</span>\n            <span \n              v-if=\"unreadCounts[user.id]\" \n              class=\"unread-badge\"\n              @click.stop=\"openPrivateChat(user)\"\n            >\n              {{ unreadCounts[user.id] }}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Контекстное меню пользователя -->\n      <div v-if=\"showContextMenu\" \n           class=\"user-context-menu\"\n           :style=\"{ top: contextMenuPosition.y + 'px', left: contextMenuPosition.x + 'px' }\">\n        <div class=\"menu-item\" @click=\"mentionUser\">\n          <i class=\"fas fa-at\"></i> Упомянуть\n        </div>\n        <div class=\"menu-item\" @click=\"sendPrivateMessage\">\n          <i class=\"fas fa-envelope\"></i> Личное сообщение\n        </div>\n        <div class=\"menu-item\" @click=\"viewProfile\">\n          <i class=\"fas fa-user\"></i> Просмотреть профиль\n        </div>\n      </div>\n    </div>\n\n    <!-- Добавляем всплывающие чаты -->\n    <div class=\"popup-chats\">\n      <PopupChat\n        v-for=\"chat in activeChats\"\n        :key=\"chat.userId\"\n        :receiver-id=\"chat.userId\"\n        @close=\"closeChat(chat.userId)\"\n      />\n    </div>\n\n    <!-- Добавляем кнопку для открытия всех личных сообщений -->\n    <div class=\"messages-button\" @click=\"toggleAllMessages\" :class=\"{ active: showAllMessages }\">\n      <i class=\"fas fa-envelope\"></i>\n      <span v-if=\"totalUnreadCount\" class=\"total-unread\">{{ totalUnreadCount }}</span>\n    </div>\n\n    <!-- Добавляем панель со всеми личными сообщениями -->\n    <div v-if=\"showAllMessages\" class=\"all-messages-panel\">\n      <div class=\"panel-header\">\n        <h3>Личные сообщения</h3>\n        <button class=\"close-btn\" @click=\"showAllMessages = false\">✕</button>\n      </div>\n      <div class=\"messages-list\">\n        <div v-if=\"privateChats.length === 0\" class=\"no-chats\">\n          У вас пока нет личных сообщений\n        </div>\n        <div v-else v-for=\"chat in privateChats\" :key=\"chat.userId\" class=\"chat-item\" @click=\"openPrivateChat(chat.user)\">\n          <div class=\"chat-avatar\">\n            <div v-if=\"chat.user.avatar_url\" class=\"user-avatar\">\n              <img :src=\"`http://localhost:8000${chat.user.avatar_url}`\" alt=\"Аватар\">\n            </div>\n            <div v-else class=\"default-avatar\">\n              <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n              </svg>\n            </div>\n          </div>\n          <div class=\"chat-info\">\n            <div class=\"chat-header\">\n              <span class=\"username\">{{ chat.user.username }}</span>\n              <span class=\"timestamp\">{{ formatDate(chat.lastMessage.created_at) }}</span>\n            </div>\n            <div class=\"last-message\" :class=\"{ unread: chat.unreadCount }\">\n              {{ chat.lastMessage.content }}\n            </div>\n          </div>\n          <div v-if=\"chat.unreadCount\" class=\"unread-count\">\n            {{ chat.unreadCount }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { axiosInstance } from '../store/modules/auth'\nimport PopupChat from './PopupChat.vue'\n\nexport default {\n  name: 'Chat',\n  components: {\n    PopupChat\n  },\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      polling: null,\n      loading: false,\n      error: null,\n      showDeleteModal: false,\n      messageToDelete: null,\n      activeUsers: [],\n      showContextMenu: false,\n      contextMenuPosition: { x: 0, y: 0 },\n      selectedUser: null,\n      activeChats: [],\n      unreadCounts: {},\n      unreadPolling: null,\n      readMessagesByUser: {},\n      showAllMessages: false,\n      privateChats: [],\n      showMentionPopup: false,\n      mentionFilter: '',\n      mentionStartIndex: -1,\n    }\n  },\n  computed: {\n    userId() {\n      return this.$store.state.auth.userId\n    },\n    totalUnreadCount() {\n      return Object.values(this.unreadCounts).reduce((sum, count) => sum + count, 0)\n    },\n    filteredUsers() {\n      if (!this.mentionFilter) return this.activeUsers\n      const filter = this.mentionFilter.toLowerCase()\n      return this.activeUsers.filter(user => \n        user.username.toLowerCase().includes(filter)\n      )\n    },\n    sortedMessages() {\n      return [...this.messages].sort((a, b) => {\n        return new Date(a.created_at) - new Date(b.created_at)\n      })\n    }\n  },\n  async created() {\n    await this.loadMessages()\n    await this.loadActiveUsers()\n    this.startPolling()\n    this.startUsersPolling()\n    this.startActivityTracking()\n    await this.updateUserActivity()\n    this.startUnreadPolling()\n  },\n  beforeUnmount() {\n    this.stopPolling()\n    this.stopUsersPolling()\n    this.stopActivityTracking()\n    document.removeEventListener('click', this.hideContextMenu)\n    this.stopUnreadPolling()\n  },\n  mounted() {\n    // Закрываем меню при клике вне его\n    document.addEventListener('click', this.hideContextMenu)\n  },\n  methods: {\n    startPolling() {\n      this.polling = setInterval(this.loadMessages, 3000)\n    },\n    stopPolling() {\n      if (this.polling) {\n        clearInterval(this.polling)\n        this.polling = null\n      }\n    },\n    async loadMessages() {\n      try {\n        const response = await axiosInstance.get('/messages')\n        if (response.data) {\n          // Сохраняем текущую позицию прокрутки и высоту контента\n          const container = this.$refs.messagesContainer\n          const wasAtBottom = container ? \n            (container.scrollHeight - container.scrollTop - container.clientHeight < 50) : \n            false\n          const oldScrollHeight = container ? container.scrollHeight : 0\n\n          this.messages = response.data\n\n          // После обновления DOM прокручиваем к нужной позиции\n          this.$nextTick(() => {\n            if (wasAtBottom) {\n              // Если были внизу, прокручиваем к новым сообщениям\n              this.scrollToBottom()\n            } else if (container) {\n              // Иначе сохраняем текущую позицию просмотра\n              container.scrollTop = container.scrollHeight - oldScrollHeight\n            }\n          })\n        }\n      } catch (error) {\n        console.error('Error loading messages:', error)\n        this.error = 'Ошибка при загрузке сообщений'\n      }\n    },\n    async sendMessage() {\n      if (!this.newMessage.trim() || this.loading) return\n\n      this.loading = true\n      try {\n        const messageData = {\n          content: this.newMessage.trim(),\n          user_id: parseInt(this.userId)\n        }\n        await axiosInstance.post('/messages', messageData)\n        await this.updateUserActivity()\n        this.newMessage = ''\n        await this.loadMessages()\n        // Всегда прокручиваем к низу при отправке своего сообщения\n        this.scrollToBottom()\n      } catch (error) {\n        console.error('Error sending message:', error)\n        alert('Ошибка при отправке сообщения')\n      } finally {\n        this.loading = false\n      }\n    },\n    formatDate(dateStr) {\n      if (!dateStr) return ''\n      try {\n        const date = new Date(dateStr)\n        return date.toLocaleString('ru-RU', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          timeZone: 'Europe/Moscow'\n        })\n      } catch (e) {\n        console.error('Error formatting date:', e)\n        return 'Некорректная дата'\n      }\n    },\n    scrollToBottom() {\n      const container = this.$refs.messagesContainer\n      if (container) {\n        container.scrollTop = container.scrollHeight\n      }\n    },\n    canDeleteMessage(message) {\n      return message.user_id === parseInt(this.userId)\n    },\n    confirmDelete(message) {\n      this.messageToDelete = message\n      this.showDeleteModal = true\n    },\n    cancelDelete() {\n      this.messageToDelete = null\n      this.showDeleteModal = false\n    },\n    async deleteMessage() {\n      if (!this.messageToDelete) return\n\n      try {\n        await axiosInstance.delete(`/messages/${this.messageToDelete.id}?current_user_id=${this.userId}`)\n        await this.loadMessages()\n        this.showDeleteModal = false\n        this.messageToDelete = null\n      } catch (error) {\n        console.error('Error deleting message:', error)\n        alert('Ошибка при удалении сообщения')\n      }\n    },\n    async loadActiveUsers() {\n      try {\n        const response = await axiosInstance.get('/users/active')\n        this.activeUsers = response.data\n      } catch (error) {\n        console.error('Error loading active users:', error)\n      }\n    },\n    startUsersPolling() {\n      this.usersPolling = setInterval(this.loadActiveUsers, 10000)\n    },\n    stopUsersPolling() {\n      if (this.usersPolling) {\n        clearInterval(this.usersPolling)\n        this.usersPolling = null\n      }\n    },\n    async updateUserActivity() {\n      try {\n        await axiosInstance.post(`/users/${this.userId}/heartbeat`)\n      } catch (error) {\n        console.error('Error updating user activity:', error)\n      }\n    },\n    startActivityTracking() {\n      this.activityInterval = setInterval(this.updateUserActivity, 30000)\n      window.addEventListener('mousemove', this.updateUserActivity)\n      window.addEventListener('keydown', this.updateUserActivity)\n    },\n    stopActivityTracking() {\n      if (this.activityInterval) {\n        clearInterval(this.activityInterval)\n        this.activityInterval = null\n      }\n      window.removeEventListener('mousemove', this.updateUserActivity)\n      window.removeEventListener('keydown', this.updateUserActivity)\n    },\n    showUserMenu(user, event) {\n      event.preventDefault()\n      event.stopPropagation()\n      \n      this.selectedUser = user\n      this.contextMenuPosition = {\n        x: event.clientX,\n        y: event.clientY\n      }\n      this.showContextMenu = true\n    },\n    hideContextMenu(event) {\n      if (!event.target.closest('.user-context-menu')) {\n        this.showContextMenu = false\n      }\n    },\n    mentionUser() {\n      if (this.selectedUser) {\n        this.newMessage = `${this.newMessage}@${this.selectedUser.username} `\n        this.$refs.messageInput?.focus()\n      }\n      this.showContextMenu = false\n    },\n    async openPrivateChat(user) {\n      const userId = user.id\n      if (!this.activeChats.find(chat => chat.userId === userId)) {\n        this.activeChats.push({ userId })\n        \n        try {\n          const response = await axiosInstance.get(\n            `/private-messages/${userId}`,\n            { \n              headers: {\n                'X-Current-User-Id': this.userId\n              }\n            }\n          )\n          \n          const unreadMessages = response.data.filter(\n            msg => msg.receiver_id === this.userId && !msg.is_read\n          )\n          \n          // Отмечаем все непрочитанные сообщения как прочитанные\n          for (const msg of unreadMessages) {\n            await axiosInstance.put(\n              `/private-messages/${msg.id}/read`,\n              null,\n              {\n                headers: {\n                  'X-Current-User-Id': this.userId\n                }\n              }\n            )\n          }\n\n          // Сохраняем последнее прочитанное время для этого пользователя\n          this.readMessagesByUser[userId] = new Date().toISOString()\n          \n          await this.loadUnreadCounts()\n        } catch (error) {\n          console.error('Error marking messages as read:', error)\n        }\n      }\n      \n      // Закрываем окно списка личных сообщений\n      this.showAllMessages = false\n    },\n    sendPrivateMessage() {\n      this.openPrivateChat(this.selectedUser)\n      this.showContextMenu = false\n    },\n    viewProfile() {\n      this.$router.push(`/profile/${this.selectedUser.id}`)\n      this.showContextMenu = false\n    },\n    closeChat(userId) {\n      // Сохраняем время закрытия чата как время последнего прочтения\n      this.readMessagesByUser[userId] = new Date().toISOString()\n      this.activeChats = this.activeChats.filter(chat => chat.userId !== userId)\n      this.loadUnreadCounts()\n    },\n    async loadUnreadCounts() {\n      try {\n        const response = await axiosInstance.get('/private-messages-unread', {\n          headers: {\n            'X-Current-User-Id': this.userId\n          }\n        })\n        \n        // Получаем все сообщения для каждого пользователя с непрочитанными сообщениями\n        const counts = { ...response.data }\n        \n        // Проверяем каждого пользователя с непрочитанными сообщениями\n        for (const userId in counts) {\n          try {\n            const messagesResponse = await axiosInstance.get(\n              `/private-messages/${userId}`,\n              { \n                headers: {\n                  'X-Current-User-Id': this.userId\n                }\n              }\n            )\n            \n            // Фильтруем только те сообщения, которые пришли после последнего прочтения\n            const lastReadTime = this.readMessagesByUser[userId]\n            if (lastReadTime) {\n              const unreadCount = messagesResponse.data.filter(msg => \n                msg.receiver_id === this.userId && \n                msg.created_at > lastReadTime\n              ).length\n              \n              if (unreadCount === 0) {\n                delete counts[userId]\n              } else {\n                counts[userId] = unreadCount\n              }\n            }\n          } catch (error) {\n            console.error('Error loading messages for user:', userId, error)\n          }\n        }\n        \n        // Исключаем открытые чаты\n        this.activeChats.forEach(chat => {\n          delete counts[chat.userId]\n        })\n        \n        this.unreadCounts = counts\n      } catch (error) {\n        console.error('Error loading unread counts:', error)\n      }\n    },\n    startUnreadPolling() {\n      this.loadUnreadCounts()\n      this.unreadPolling = setInterval(this.loadUnreadCounts, 3000)\n    },\n    stopUnreadPolling() {\n      if (this.unreadPolling) {\n        clearInterval(this.unreadPolling)\n        this.unreadPolling = null\n      }\n    },\n    async toggleAllMessages() {\n      this.showAllMessages = !this.showAllMessages\n      if (this.showAllMessages) {\n        await this.loadPrivateChats()\n      }\n    },\n    async loadPrivateChats() {\n      try {\n        const response = await axiosInstance.get('/pm-chats', {\n          headers: {\n            'X-Current-User-Id': this.userId\n          }\n        })\n        this.privateChats = response.data\n        console.log('Loaded chats:', this.privateChats) // Для отладки\n      } catch (error) {\n        console.error('Error loading private chats:', error)\n      }\n    },\n    handleInput(event) {\n      const text = event.target.value\n      const lastAtIndex = text.lastIndexOf('@')\n      \n      if (lastAtIndex !== -1 && (lastAtIndex === 0 || text[lastAtIndex - 1] === ' ')) {\n        this.mentionStartIndex = lastAtIndex\n        this.mentionFilter = text.slice(lastAtIndex + 1)\n        this.showMentionPopup = true\n      } else if (this.showMentionPopup && this.mentionStartIndex !== -1) {\n        this.mentionFilter = text.slice(this.mentionStartIndex + 1)\n        if (!this.mentionFilter || text[this.mentionStartIndex] !== '@') {\n          this.closeMentionPopup()\n        }\n      }\n    },\n    handleKeydown(event) {\n      if (!this.showMentionPopup) return\n\n      if (event.key === 'Escape') {\n        this.closeMentionPopup()\n      }\n    },\n    selectMention(user) {\n      const beforeMention = this.newMessage.slice(0, this.mentionStartIndex)\n      const afterMention = this.newMessage.slice(this.mentionStartIndex + this.mentionFilter.length + 1)\n      this.newMessage = `${beforeMention}@${user.username} ${afterMention}`\n      this.closeMentionPopup()\n      this.$refs.messageInput.focus()\n    },\n    closeMentionPopup() {\n      this.showMentionPopup = false\n      this.mentionFilter = ''\n      this.mentionStartIndex = -1\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  gap: 20px;\n  height: calc(100vh - 100px);\n  padding: 20px;\n}\n\n.chat {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-messages {\n  flex-grow: 1;\n  overflow-y: auto;\n  margin-bottom: 20px;\n  padding: 10px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.no-messages {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n}\n\n.message {\n  margin-bottom: 15px;\n  padding: 10px;\n  background: #f5f5f5;\n  border-radius: 4px;\n}\n\n.message-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 5px;\n}\n\n.message-controls {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.message-avatar,\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  overflow: hidden;\n  flex-shrink: 0;\n}\n\n.message-avatar img,\n.user-avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.default-avatar {\n  background-color: #e0e0e0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n}\n\n.default-avatar svg {\n  width: 24px;\n  height: 24px;\n  color: #757575;\n}\n\n.username {\n  font-weight: bold;\n  color: #42b983;\n}\n\n.timestamp {\n  color: #666;\n  font-size: 0.8em;\n}\n\n.message-content {\n  margin-left: 50px;\n  word-break: break-word;\n}\n\n.chat-input {\n  position: relative;\n  display: flex;\n  gap: 10px;\n}\n\n.mention-popup {\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  width: 200px;\n  max-height: 200px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);\n  overflow-y: auto;\n  z-index: 1000;\n  margin-bottom: 5px;\n}\n\n.mention-item {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 8px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.mention-item:hover {\n  background-color: #f5f5f5;\n}\n\n.mention-avatar {\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  overflow: hidden;\n}\n\n.mention-avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.mention-username {\n  font-size: 0.9em;\n  color: #333;\n}\n\ninput {\n  flex-grow: 1;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\ninput:disabled {\n  background-color: #f5f5f5;\n  cursor: not-allowed;\n}\n\n.chat-input button {\n  min-width: 100px;\n  padding: 10px 20px;\n  background: #42b983;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.chat-input button:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.delete-btn {\n  background: none;\n  border: none;\n  color: #999;\n  cursor: pointer;\n  padding: 0 5px;\n  font-size: 1.2em;\n  line-height: 1;\n}\n\n.delete-btn:hover {\n  color: #ff4444;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 300px;\n  text-align: center;\n}\n\n.modal-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.delete-confirm-btn {\n  background: #ff4444;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.delete-confirm-btn:hover {\n  background: #ff2222;\n}\n\n.cancel-btn {\n  background: #666;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.cancel-btn:hover {\n  background: #555;\n}\n\n.users-list {\n  width: 250px;\n  background: white;\n  border-radius: 8px;\n  padding: 15px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.users-list h3 {\n  margin: 0 0 15px 0;\n  color: #333;\n  font-size: 1.1em;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n.users {\n  overflow-y: auto;\n  max-height: calc(100% - 50px);\n}\n\n.user-item {\n  display: flex;\n  align-items: center;\n  padding: 8px 0;\n  border-bottom: 1px solid #f5f5f5;\n  gap: 12px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.user-item:hover {\n  background-color: #f5f5f5;\n}\n\n.user-info-container {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  flex-grow: 1;\n  padding-right: 8px;\n}\n\n.user-status {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: #42b983;\n  flex-shrink: 0;\n}\n\n.user-name {\n  color: #333;\n  font-size: 0.9em;\n}\n\n.user-context-menu {\n  position: fixed;\n  background: white;\n  border-radius: 4px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  padding: 8px 0;\n  z-index: 1000;\n  min-width: 200px;\n}\n\n.menu-item {\n  padding: 8px 16px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  transition: background-color 0.2s;\n}\n\n.menu-item:hover {\n  background-color: #f5f5f5;\n}\n\n.menu-item i {\n  width: 16px;\n  color: #666;\n}\n\n.popup-chats {\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  display: flex;\n  flex-direction: row-reverse;\n  gap: 20px;\n  padding: 0 20px;\n  pointer-events: none;\n}\n\n.popup-chats > * {\n  pointer-events: auto;\n}\n\n.unread-badge {\n  background-color: #ff4444;\n  color: white;\n  border-radius: 50%;\n  min-width: 20px;\n  height: 20px;\n  padding: 0 6px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: auto;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.unread-badge:hover {\n  background-color: #ff2222;\n}\n\n.messages-button {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background: #42b983;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n  transition: transform 0.2s;\n  z-index: 1000;\n}\n\n.messages-button:hover {\n  transform: scale(1.1);\n}\n\n.messages-button.active {\n  background: #3aa876;\n}\n\n.messages-button i {\n  font-size: 24px;\n}\n\n.total-unread {\n  position: absolute;\n  top: -5px;\n  right: -5px;\n  background: #ff4444;\n  color: white;\n  border-radius: 50%;\n  min-width: 20px;\n  height: 20px;\n  padding: 0 6px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.all-messages-panel {\n  position: fixed;\n  bottom: 90px;\n  right: 20px;\n  width: 300px;\n  height: 400px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  z-index: 999;\n}\n\n.panel-header {\n  padding: 15px;\n  border-bottom: 1px solid #eee;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.panel-header h3 {\n  margin: 0;\n  color: #333;\n}\n\n.messages-list {\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n}\n\n.chat-item {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 10px;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 0.2s;\n}\n\n.chat-item:hover {\n  background-color: #f5f5f5;\n}\n\n.chat-avatar {\n  width: 40px;\n  height: 40px;\n  flex-shrink: 0;\n}\n\n.chat-info {\n  flex-grow: 1;\n  min-width: 0;\n}\n\n.chat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 4px;\n}\n\n.chat-header .timestamp {\n  font-size: 0.8em;\n  color: #666;\n}\n\n.last-message {\n  color: #666;\n  font-size: 0.9em;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.last-message.unread {\n  color: #333;\n  font-weight: bold;\n}\n\n.unread-count {\n  background: #42b983;\n  color: white;\n  border-radius: 50%;\n  min-width: 20px;\n  height: 20px;\n  padding: 0 6px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.no-chats {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n  font-style: italic;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}