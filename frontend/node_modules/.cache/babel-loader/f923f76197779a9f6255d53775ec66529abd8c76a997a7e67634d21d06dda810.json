{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\nconst API_URL = 'http://localhost:8000/api';\nexport default createStore({\n  state: {\n    auth: {\n      isAuthenticated: false,\n      user: null,\n      token: null,\n      error: null\n    }\n  },\n  mutations: {\n    SET_AUTH(state, auth) {\n      state.auth = auth;\n    },\n    SET_ERROR(state, error) {\n      state.auth.error = error;\n    },\n    CLEAR_ERROR(state) {\n      state.auth.error = null;\n    }\n  },\n  actions: {\n    async register({\n      commit\n    }, userData) {\n      try {\n        commit('CLEAR_ERROR');\n        const response = await axios.post(`${API_URL}/register`, {\n          username: userData.username,\n          email: userData.email,\n          password: userData.password\n        });\n        console.log('Registration successful:', response.data);\n        return response.data;\n      } catch (error) {\n        const errorMessage = error.response?.data?.detail || 'Ошибка при регистрации';\n        commit('SET_ERROR', errorMessage);\n        throw new Error(errorMessage);\n      }\n    },\n    async login({\n      commit\n    }, credentials) {\n      try {\n        commit('CLEAR_ERROR');\n        const formData = new FormData();\n        formData.append('username', credentials.username);\n        formData.append('password', credentials.password);\n        const response = await axios.post(`${API_URL}/login`, formData);\n        const {\n          access_token,\n          username\n        } = response.data;\n        commit('SET_AUTH', {\n          isAuthenticated: true,\n          user: username,\n          token: access_token,\n          error: null\n        });\n\n        // Сохраняем токен\n        localStorage.setItem('token', access_token);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n        return response.data;\n      } catch (error) {\n        const errorMessage = error.response?.data?.detail || 'Ошибка при входе';\n        commit('SET_ERROR', errorMessage);\n        throw new Error(errorMessage);\n      }\n    },\n    logout({\n      commit\n    }) {\n      localStorage.removeItem('token');\n      delete axios.defaults.headers.common['Authorization'];\n      commit('SET_AUTH', {\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        error: null\n      });\n    }\n  },\n  getters: {\n    isAuthenticated: state => state.auth.isAuthenticated,\n    currentUser: state => state.auth.user,\n    authError: state => state.auth.error\n  }\n});","map":{"version":3,"names":["createStore","axios","API_URL","state","auth","isAuthenticated","user","token","error","mutations","SET_AUTH","SET_ERROR","CLEAR_ERROR","actions","register","commit","userData","response","post","username","email","password","console","log","data","errorMessage","detail","Error","login","credentials","formData","FormData","append","access_token","localStorage","setItem","defaults","headers","common","logout","removeItem","getters","currentUser","authError"],"sources":["/home/dotcore/ichat/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport axios from 'axios'\n\nconst API_URL = 'http://localhost:8000/api'\n\nexport default createStore({\n  state: {\n    auth: {\n      isAuthenticated: false,\n      user: null,\n      token: null,\n      error: null\n    }\n  },\n  mutations: {\n    SET_AUTH(state, auth) {\n      state.auth = auth\n    },\n    SET_ERROR(state, error) {\n      state.auth.error = error\n    },\n    CLEAR_ERROR(state) {\n      state.auth.error = null\n    }\n  },\n  actions: {\n    async register({ commit }, userData) {\n      try {\n        commit('CLEAR_ERROR')\n        const response = await axios.post(`${API_URL}/register`, {\n          username: userData.username,\n          email: userData.email,\n          password: userData.password\n        })\n        \n        console.log('Registration successful:', response.data)\n        return response.data\n      } catch (error) {\n        const errorMessage = error.response?.data?.detail || 'Ошибка при регистрации'\n        commit('SET_ERROR', errorMessage)\n        throw new Error(errorMessage)\n      }\n    },\n    async login({ commit }, credentials) {\n      try {\n        commit('CLEAR_ERROR')\n        const formData = new FormData()\n        formData.append('username', credentials.username)\n        formData.append('password', credentials.password)\n\n        const response = await axios.post(`${API_URL}/login`, formData)\n        const { access_token, username } = response.data\n        \n        commit('SET_AUTH', {\n          isAuthenticated: true,\n          user: username,\n          token: access_token,\n          error: null\n        })\n        \n        // Сохраняем токен\n        localStorage.setItem('token', access_token)\n        axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`\n        \n        return response.data\n      } catch (error) {\n        const errorMessage = error.response?.data?.detail || 'Ошибка при входе'\n        commit('SET_ERROR', errorMessage)\n        throw new Error(errorMessage)\n      }\n    },\n    logout({ commit }) {\n      localStorage.removeItem('token')\n      delete axios.defaults.headers.common['Authorization']\n      commit('SET_AUTH', {\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        error: null\n      })\n    }\n  },\n  getters: {\n    isAuthenticated: state => state.auth.isAuthenticated,\n    currentUser: state => state.auth.user,\n    authError: state => state.auth.error\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}