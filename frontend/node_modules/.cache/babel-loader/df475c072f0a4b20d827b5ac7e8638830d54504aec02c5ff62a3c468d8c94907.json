{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat\"\n};\nconst _hoisted_2 = {\n  class: \"chat-messages\",\n  ref: \"messagesContainer\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"no-messages\"\n};\nconst _hoisted_4 = {\n  class: \"message-header\"\n};\nconst _hoisted_5 = {\n  class: \"username\"\n};\nconst _hoisted_6 = {\n  class: \"timestamp\"\n};\nconst _hoisted_7 = {\n  class: \"message-content\"\n};\nconst _hoisted_8 = {\n  class: \"chat-input\"\n};\nconst _hoisted_9 = [\"disabled\"];\nconst _hoisted_10 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [$data.messages.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \" Нет сообщений \")) : (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 1\n  }, _renderList($data.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: \"message\"\n    }, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"span\", _hoisted_5, _toDisplayString(message.username), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_6, _toDisplayString($options.formatDate(message.created_at)), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, _toDisplayString(message.content), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_8, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    placeholder: \"Введите сообщение...\",\n    disabled: $data.loading\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_9), [[_vModelText, $data.newMessage]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args)),\n    disabled: !$data.newMessage.trim() || $data.loading\n  }, _toDisplayString($data.loading ? 'Отправка...' : 'Отправить'), 9 /* TEXT, PROPS */, _hoisted_10)])]);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$data","messages","length","_hoisted_3","_Fragment","_renderList","message","id","_hoisted_4","_hoisted_5","_toDisplayString","username","_hoisted_6","$options","formatDate","created_at","_hoisted_7","content","_hoisted_8","_cache","$event","newMessage","onKeyup","_withKeys","args","sendMessage","placeholder","disabled","loading","_hoisted_9","onClick","trim","_hoisted_10"],"sources":["/home/dotcore/ichat/frontend/src/components/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat\">\n    <div class=\"chat-messages\" ref=\"messagesContainer\">\n      <div v-if=\"messages.length === 0\" class=\"no-messages\">\n        Нет сообщений\n      </div>\n      <div v-else v-for=\"message in messages\" :key=\"message.id\" class=\"message\">\n        <div class=\"message-header\">\n          <span class=\"username\">{{ message.username }}</span>\n          <span class=\"timestamp\">{{ formatDate(message.created_at) }}</span>\n        </div>\n        <div class=\"message-content\">{{ message.content }}</div>\n      </div>\n    </div>\n    <div class=\"chat-input\">\n      <input \n        v-model=\"newMessage\" \n        @keyup.enter=\"sendMessage\"\n        placeholder=\"Введите сообщение...\"\n        :disabled=\"loading\"\n      >\n      <button @click=\"sendMessage\" :disabled=\"!newMessage.trim() || loading\">\n        {{ loading ? 'Отправка...' : 'Отправить' }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      polling: null,\n      loading: false,\n      error: null\n    }\n  },\n  computed: {\n    userId() {\n      return this.$store.state.auth.userId\n    }\n  },\n  async created() {\n    await this.loadMessages()\n    this.startPolling()\n  },\n  beforeUnmount() {\n    this.stopPolling()\n  },\n  methods: {\n    startPolling() {\n      this.polling = setInterval(this.loadMessages, 3000)\n    },\n    stopPolling() {\n      if (this.polling) {\n        clearInterval(this.polling)\n        this.polling = null\n      }\n    },\n    async loadMessages() {\n      try {\n        const response = await axios.get('http://localhost:8000/api/messages')\n        if (response.data) {\n          this.messages = response.data\n          this.$nextTick(() => {\n            this.scrollToBottom()\n          })\n        }\n      } catch (error) {\n        console.error('Error loading messages:', error)\n        this.error = 'Ошибка при загрузке сообщений'\n      }\n    },\n    async sendMessage() {\n      if (!this.newMessage.trim() || this.loading) return\n\n      this.loading = true\n      try {\n        const messageData = {\n          content: this.newMessage.trim(),\n          user_id: parseInt(this.userId)\n        }\n        await axios.post('http://localhost:8000/api/messages', messageData)\n        this.newMessage = ''\n        await this.loadMessages()\n      } catch (error) {\n        console.error('Error sending message:', error)\n        alert('Ошибка при отправке сообщения')\n      } finally {\n        this.loading = false\n      }\n    },\n    formatDate(dateStr) {\n      if (!dateStr) return ''\n      try {\n        const date = new Date(dateStr)\n        return date.toLocaleString('ru-RU', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      } catch (e) {\n        console.error('Error formatting date:', e)\n        return 'Некорректная дата'\n      }\n    },\n    scrollToBottom() {\n      const container = this.$refs.messagesContainer\n      if (container) {\n        container.scrollTop = container.scrollHeight\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat {\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 100px);\n  padding: 20px;\n}\n\n.chat-messages {\n  flex-grow: 1;\n  overflow-y: auto;\n  margin-bottom: 20px;\n  padding: 10px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.no-messages {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n}\n\n.message {\n  margin-bottom: 15px;\n  padding: 10px;\n  background: #f5f5f5;\n  border-radius: 4px;\n}\n\n.message-header {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 5px;\n  font-size: 0.9em;\n}\n\n.username {\n  font-weight: bold;\n  color: #42b983;\n}\n\n.timestamp {\n  color: #666;\n}\n\n.message-content {\n  word-break: break-word;\n}\n\n.chat-input {\n  display: flex;\n  gap: 10px;\n}\n\ninput {\n  flex-grow: 1;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\ninput:disabled {\n  background-color: #f5f5f5;\n  cursor: not-allowed;\n}\n\n.chat-input button {\n  min-width: 100px;\n  padding: 10px 20px;\n  background: #42b983;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.chat-input button:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC,eAAe;EAACC,GAAG,EAAC;;;EAFnCC,GAAA;EAGwCF,KAAK,EAAC;;;EAIjCA,KAAK,EAAC;AAAgB;;EACnBA,KAAK,EAAC;AAAU;;EAChBA,KAAK,EAAC;AAAW;;EAEpBA,KAAK,EAAC;AAAiB;;EAG3BA,KAAK,EAAC;AAAY;mBAd3B;oBAAA;;uBACEG,mBAAA,CAwBM,OAxBNC,UAwBM,GAvBJC,mBAAA,CAWM,OAXNC,UAWM,GAVOC,KAAA,CAAAC,QAAQ,CAACC,MAAM,U,cAA1BN,mBAAA,CAEM,OAFNO,UAEM,EAFgD,iBAEtD,M,kBACAP,mBAAA,CAMMQ,SAAA;IAZZT,GAAA;EAAA,GAAAU,WAAA,CAMoCL,KAAA,CAAAC,QAAQ,EAAnBK,OAAO;yBAA1BV,mBAAA,CAMM;MANmCD,GAAG,EAAEW,OAAO,CAACC,EAAE;MAAEd,KAAK,EAAC;QAC9DK,mBAAA,CAGM,OAHNU,UAGM,GAFJV,mBAAA,CAAoD,QAApDW,UAAoD,EAAAC,gBAAA,CAA1BJ,OAAO,CAACK,QAAQ,kBAC1Cb,mBAAA,CAAmE,QAAnEc,UAAmE,EAAAF,gBAAA,CAAxCG,QAAA,CAAAC,UAAU,CAACR,OAAO,CAACS,UAAU,kB,GAE1DjB,mBAAA,CAAwD,OAAxDkB,UAAwD,EAAAN,gBAAA,CAAxBJ,OAAO,CAACW,OAAO,iB;0DAGnDnB,mBAAA,CAUM,OAVNoB,UAUM,G,gBATJpB,mBAAA,CAKC;IApBP,uBAAAqB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAgBiBpB,KAAA,CAAAqB,UAAU,GAAAD,MAAA;IAClBE,OAAK,EAAAH,MAAA,QAAAA,MAAA,MAjBdI,SAAA,KAAAC,IAAA,KAiBsBX,QAAA,CAAAY,WAAA,IAAAZ,QAAA,CAAAY,WAAA,IAAAD,IAAA,CAAW;IACzBE,WAAW,EAAC,sBAAsB;IACjCC,QAAQ,EAAE3B,KAAA,CAAA4B;2CAnBnBC,UAAA,I,cAgBiB7B,KAAA,CAAAqB,UAAU,E,GAKrBvB,mBAAA,CAES;IAFAgC,OAAK,EAAAX,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEX,QAAA,CAAAY,WAAA,IAAAZ,QAAA,CAAAY,WAAA,IAAAD,IAAA,CAAW;IAAGG,QAAQ,GAAG3B,KAAA,CAAAqB,UAAU,CAACU,IAAI,MAAM/B,KAAA,CAAA4B;sBACzD5B,KAAA,CAAA4B,OAAO,sDAtBlBI,WAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}