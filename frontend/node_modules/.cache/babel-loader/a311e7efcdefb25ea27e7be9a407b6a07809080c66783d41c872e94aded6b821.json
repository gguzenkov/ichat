{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport Login from '../components/Login.vue';\nimport Register from '../components/Register.vue';\nimport Chat from '../components/Chat.vue';\nimport Profile from '../components/Profile.vue';\nimport PrivateChat from '../components/PrivateChat.vue';\nimport store from '../store';\nconst routes = [{\n  path: '/',\n  redirect: '/login'\n}, {\n  path: '/login',\n  name: 'Login',\n  component: Login\n}, {\n  path: '/register',\n  name: 'Register',\n  component: Register\n}, {\n  path: '/chat',\n  name: 'Chat',\n  component: Chat,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/profile',\n  name: 'Profile',\n  component: Profile,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/chat/:userId',\n  name: 'PrivateChat',\n  component: PrivateChat,\n  props: true,\n  meta: {\n    requiresAuth: true\n  }\n}];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\n\n// Навигационный guard для проверки авторизации\nrouter.beforeEach((to, from, next) => {\n  const isAuthenticated = store.getters.isAuthenticated;\n  if (to.meta.requiresAuth && !isAuthenticated) {\n    next('/login');\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","Login","Register","Chat","Profile","PrivateChat","store","routes","path","redirect","name","component","meta","requiresAuth","props","router","history","beforeEach","to","from","next","isAuthenticated","getters"],"sources":["/home/dotcore/ichat/frontend/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router'\nimport Login from '../components/Login.vue'\nimport Register from '../components/Register.vue'\nimport Chat from '../components/Chat.vue'\nimport Profile from '../components/Profile.vue'\nimport PrivateChat from '../components/PrivateChat.vue'\nimport store from '../store'\n\nconst routes = [\n  {\n    path: '/',\n    redirect: '/login'\n  },\n  {\n    path: '/login',\n    name: 'Login',\n    component: Login\n  },\n  {\n    path: '/register',\n    name: 'Register',\n    component: Register\n  },\n  {\n    path: '/chat',\n    name: 'Chat',\n    component: Chat,\n    meta: { requiresAuth: true }\n  },\n  {\n    path: '/profile',\n    name: 'Profile',\n    component: Profile,\n    meta: { requiresAuth: true }\n  },\n  {\n    path: '/chat/:userId',\n    name: 'PrivateChat',\n    component: PrivateChat,\n    props: true,\n    meta: { requiresAuth: true }\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})\n\n// Навигационный guard для проверки авторизации\nrouter.beforeEach((to, from, next) => {\n  const isAuthenticated = store.getters.isAuthenticated\n  \n  if (to.meta.requiresAuth && !isAuthenticated) {\n    next('/login')\n  } else {\n    next()\n  }\n})\n\nexport default router "],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,KAAK,MAAM,yBAAyB;AAC3C,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,WAAW,MAAM,+BAA+B;AACvD,OAAOC,KAAK,MAAM,UAAU;AAE5B,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,QAAQ,EAAE;AACZ,CAAC,EACD;EACED,IAAI,EAAE,QAAQ;EACdE,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEV;AACb,CAAC,EACD;EACEO,IAAI,EAAE,WAAW;EACjBE,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAET;AACb,CAAC,EACD;EACEM,IAAI,EAAE,OAAO;EACbE,IAAI,EAAE,MAAM;EACZC,SAAS,EAAER,IAAI;EACfS,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,UAAU;EAChBE,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEP,OAAO;EAClBQ,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,eAAe;EACrBE,IAAI,EAAE,aAAa;EACnBC,SAAS,EAAEN,WAAW;EACtBS,KAAK,EAAE,IAAI;EACXF,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,CACF;AAED,MAAME,MAAM,GAAGhB,YAAY,CAAC;EAC1BiB,OAAO,EAAEhB,gBAAgB,CAAC,CAAC;EAC3BO;AACF,CAAC,CAAC;;AAEF;AACAQ,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,eAAe,GAAGf,KAAK,CAACgB,OAAO,CAACD,eAAe;EAErD,IAAIH,EAAE,CAACN,IAAI,CAACC,YAAY,IAAI,CAACQ,eAAe,EAAE;IAC5CD,IAAI,CAAC,QAAQ,CAAC;EAChB,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}