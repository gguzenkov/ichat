{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, withModifiers as _withModifiers, createTextVNode as _createTextVNode, normalizeStyle as _normalizeStyle, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat\"\n};\nconst _hoisted_3 = {\n  class: \"chat-messages\",\n  ref: \"messagesContainer\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"no-messages\"\n};\nconst _hoisted_5 = {\n  class: \"message-header\"\n};\nconst _hoisted_6 = {\n  class: \"user-info\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"message-avatar\"\n};\nconst _hoisted_8 = [\"src\"];\nconst _hoisted_9 = {\n  key: 1,\n  class: \"message-avatar default-avatar\"\n};\nconst _hoisted_10 = {\n  class: \"username\"\n};\nconst _hoisted_11 = {\n  class: \"message-controls\"\n};\nconst _hoisted_12 = {\n  class: \"timestamp\"\n};\nconst _hoisted_13 = [\"onClick\"];\nconst _hoisted_14 = {\n  class: \"message-content\"\n};\nconst _hoisted_15 = {\n  class: \"chat-input\"\n};\nconst _hoisted_16 = {\n  key: 0,\n  class: \"mention-popup\",\n  ref: \"mentionPopup\"\n};\nconst _hoisted_17 = [\"onClick\"];\nconst _hoisted_18 = {\n  key: 0,\n  class: \"mention-avatar\"\n};\nconst _hoisted_19 = [\"src\"];\nconst _hoisted_20 = {\n  key: 1,\n  class: \"mention-avatar default-avatar\"\n};\nconst _hoisted_21 = {\n  class: \"mention-username\"\n};\nconst _hoisted_22 = {\n  key: 1,\n  class: \"emoji-picker\",\n  ref: \"emojiPicker\"\n};\nconst _hoisted_23 = {\n  class: \"emoji-categories\"\n};\nconst _hoisted_24 = [\"onClick\"];\nconst _hoisted_25 = {\n  class: \"emoji-list\"\n};\nconst _hoisted_26 = [\"onClick\"];\nconst _hoisted_27 = {\n  class: \"input-wrapper\"\n};\nconst _hoisted_28 = [\"disabled\"];\nconst _hoisted_29 = [\"disabled\"];\nconst _hoisted_30 = {\n  key: 0,\n  class: \"modal\"\n};\nconst _hoisted_31 = {\n  class: \"modal-content\"\n};\nconst _hoisted_32 = {\n  class: \"modal-buttons\"\n};\nconst _hoisted_33 = {\n  class: \"users-list\"\n};\nconst _hoisted_34 = {\n  class: \"users\"\n};\nconst _hoisted_35 = [\"onClick\"];\nconst _hoisted_36 = {\n  key: 0,\n  class: \"user-avatar\"\n};\nconst _hoisted_37 = [\"src\"];\nconst _hoisted_38 = {\n  key: 1,\n  class: \"user-avatar default-avatar\"\n};\nconst _hoisted_39 = {\n  class: \"user-info-container\"\n};\nconst _hoisted_40 = {\n  class: \"user-name\"\n};\nconst _hoisted_41 = [\"onClick\"];\nconst _hoisted_42 = {\n  class: \"popup-chats\"\n};\nconst _hoisted_43 = {\n  key: 0,\n  class: \"total-unread\"\n};\nconst _hoisted_44 = {\n  key: 0,\n  class: \"all-messages-panel\"\n};\nconst _hoisted_45 = {\n  class: \"panel-header\"\n};\nconst _hoisted_46 = {\n  class: \"messages-list\"\n};\nconst _hoisted_47 = {\n  key: 0,\n  class: \"no-chats\"\n};\nconst _hoisted_48 = [\"onClick\"];\nconst _hoisted_49 = {\n  class: \"chat-avatar\"\n};\nconst _hoisted_50 = {\n  key: 0,\n  class: \"user-avatar\"\n};\nconst _hoisted_51 = [\"src\"];\nconst _hoisted_52 = {\n  key: 1,\n  class: \"default-avatar\"\n};\nconst _hoisted_53 = {\n  class: \"chat-info\"\n};\nconst _hoisted_54 = {\n  class: \"chat-header\"\n};\nconst _hoisted_55 = {\n  class: \"username\"\n};\nconst _hoisted_56 = {\n  class: \"timestamp\"\n};\nconst _hoisted_57 = {\n  key: 0,\n  class: \"unread-count\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_PopupChat = _resolveComponent(\"PopupChat\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [$data.messages.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \" Нет сообщений \")) : (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 1\n  }, _renderList($options.sortedMessages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: \"message\"\n    }, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [message.avatar_url ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createElementVNode(\"img\", {\n      src: `http://localhost:8000${message.avatar_url}`,\n      alt: \"Аватар\"\n    }, null, 8 /* PROPS */, _hoisted_8)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [...(_cache[13] || (_cache[13] = [_createElementVNode(\"svg\", {\n      viewBox: \"0 0 24 24\",\n      fill: \"currentColor\"\n    }, [_createElementVNode(\"path\", {\n      d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"\n    })], -1 /* HOISTED */)]))])), _createElementVNode(\"span\", _hoisted_10, _toDisplayString(message.username), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"span\", _hoisted_12, _toDisplayString($options.formatDate(message.created_at)), 1 /* TEXT */), $options.canDeleteMessage(message) ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: $event => $options.confirmDelete(message),\n      class: \"delete-btn\"\n    }, \" ✕ \", 8 /* PROPS */, _hoisted_13)) : _createCommentVNode(\"v-if\", true)])]), _createElementVNode(\"div\", _hoisted_14, _toDisplayString(message.content), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_15, [$data.showMentionPopup ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredUsers, user => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: user.id,\n      class: \"mention-item\",\n      onClick: $event => $options.selectMention(user)\n    }, [user.avatar_url ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_createElementVNode(\"img\", {\n      src: `http://localhost:8000${user.avatar_url}`,\n      alt: \"Аватар\"\n    }, null, 8 /* PROPS */, _hoisted_19)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [...(_cache[14] || (_cache[14] = [_createElementVNode(\"svg\", {\n      viewBox: \"0 0 24 24\",\n      fill: \"currentColor\"\n    }, [_createElementVNode(\"path\", {\n      d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"\n    })], -1 /* HOISTED */)]))])), _createElementVNode(\"span\", _hoisted_21, _toDisplayString(user.username), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_17);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Добавляем панель эмодзи \"), $data.showEmojiPicker ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [_createElementVNode(\"div\", _hoisted_23, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.emojiCategories, (category, name) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: name,\n      onClick: $event => $data.currentCategory = name,\n      class: _normalizeClass({\n        active: $data.currentCategory === name\n      })\n    }, _toDisplayString(category.icon), 11 /* TEXT, CLASS, PROPS */, _hoisted_24);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_25, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.currentEmojis, emoji => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: emoji,\n      onClick: $event => $options.addEmoji(emoji),\n      class: \"emoji-button\"\n    }, _toDisplayString(emoji), 9 /* TEXT, PROPS */, _hoisted_26);\n  }), 128 /* KEYED_FRAGMENT */))])], 512 /* NEED_PATCH */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_27, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    onInput: _cache[2] || (_cache[2] = (...args) => $options.handleInput && $options.handleInput(...args)),\n    onKeydown: _cache[3] || (_cache[3] = (...args) => $options.handleKeydown && $options.handleKeydown(...args)),\n    placeholder: \"Введите сообщение...\",\n    disabled: $data.loading,\n    ref: \"messageInput\"\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_28), [[_vModelText, $data.newMessage]]), _createElementVNode(\"span\", {\n    class: \"emoji-trigger\",\n    onClick: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.toggleEmojiPicker && $options.toggleEmojiPicker(...args), [\"stop\"])),\n    title: \"Добавить эмодзи\"\n  }, _cache[15] || (_cache[15] = [_createElementVNode(\"i\", {\n    class: \"far fa-smile\"\n  }, null, -1 /* HOISTED */)]))]), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.sendMessage && $options.sendMessage(...args)),\n    disabled: !$data.newMessage.trim() || $data.loading\n  }, _toDisplayString($data.loading ? 'Отправка...' : 'Отправить'), 9 /* TEXT, PROPS */, _hoisted_29)]), $data.showDeleteModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_30, [_createElementVNode(\"div\", _hoisted_31, [_cache[16] || (_cache[16] = _createElementVNode(\"h3\", null, \"Подтверждение удаления\", -1 /* HOISTED */)), _cache[17] || (_cache[17] = _createElementVNode(\"p\", null, \"Вы действительно хотите удалить это сообщение?\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_32, [_createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.deleteMessage && $options.deleteMessage(...args)),\n    class: \"delete-confirm-btn\"\n  }, \"Удалить\"), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.cancelDelete && $options.cancelDelete(...args)),\n    class: \"cancel-btn\"\n  }, \"Отмена\")])])])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_33, [_cache[23] || (_cache[23] = _createElementVNode(\"h3\", null, \"Участники чата\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_34, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.activeUsers, user => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: user.id,\n      class: \"user-item\",\n      onClick: $event => $options.showUserMenu(user, $event)\n    }, [user.avatar_url ? (_openBlock(), _createElementBlock(\"div\", _hoisted_36, [_createElementVNode(\"img\", {\n      src: `http://localhost:8000${user.avatar_url}`,\n      alt: \"Аватар\"\n    }, null, 8 /* PROPS */, _hoisted_37)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_38, [...(_cache[18] || (_cache[18] = [_createElementVNode(\"svg\", {\n      viewBox: \"0 0 24 24\",\n      fill: \"currentColor\"\n    }, [_createElementVNode(\"path\", {\n      d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"\n    })], -1 /* HOISTED */)]))])), _createElementVNode(\"div\", _hoisted_39, [_cache[19] || (_cache[19] = _createElementVNode(\"span\", {\n      class: \"user-status\"\n    }, null, -1 /* HOISTED */)), _createElementVNode(\"span\", _hoisted_40, _toDisplayString(user.username), 1 /* TEXT */), $data.unreadCounts[user.id] ? (_openBlock(), _createElementBlock(\"span\", {\n      key: 0,\n      class: \"unread-badge\",\n      onClick: _withModifiers($event => $options.openPrivateChat(user), [\"stop\"])\n    }, _toDisplayString($data.unreadCounts[user.id]), 9 /* TEXT, PROPS */, _hoisted_41)) : _createCommentVNode(\"v-if\", true)])], 8 /* PROPS */, _hoisted_35);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Контекстное меню пользователя \"), $data.showContextMenu ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"user-context-menu\",\n    style: _normalizeStyle({\n      top: $data.contextMenuPosition.y + 'px',\n      left: $data.contextMenuPosition.x + 'px'\n    })\n  }, [_createElementVNode(\"div\", {\n    class: \"menu-item\",\n    onClick: _cache[8] || (_cache[8] = (...args) => $options.mentionUser && $options.mentionUser(...args))\n  }, _cache[20] || (_cache[20] = [_createElementVNode(\"i\", {\n    class: \"fas fa-at\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Упомянуть \")])), _createElementVNode(\"div\", {\n    class: \"menu-item\",\n    onClick: _cache[9] || (_cache[9] = (...args) => $options.sendPrivateMessage && $options.sendPrivateMessage(...args))\n  }, _cache[21] || (_cache[21] = [_createElementVNode(\"i\", {\n    class: \"fas fa-envelope\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Личное сообщение \")])), _createElementVNode(\"div\", {\n    class: \"menu-item\",\n    onClick: _cache[10] || (_cache[10] = (...args) => $options.viewProfile && $options.viewProfile(...args))\n  }, _cache[22] || (_cache[22] = [_createElementVNode(\"i\", {\n    class: \"fas fa-user\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Просмотреть профиль \")]))], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Добавляем всплывающие чаты \"), _createElementVNode(\"div\", _hoisted_42, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.activeChats, chat => {\n    return _openBlock(), _createBlock(_component_PopupChat, {\n      key: chat.userId,\n      \"receiver-id\": chat.userId,\n      onClose: $event => $options.closeChat(chat.userId)\n    }, null, 8 /* PROPS */, [\"receiver-id\", \"onClose\"]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Добавляем кнопку для открытия всех личных сообщений \"), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"messages-button\", {\n      active: $data.showAllMessages\n    }]),\n    onClick: _cache[11] || (_cache[11] = (...args) => $options.toggleAllMessages && $options.toggleAllMessages(...args))\n  }, [_cache[24] || (_cache[24] = _createElementVNode(\"i\", {\n    class: \"fas fa-envelope\"\n  }, null, -1 /* HOISTED */)), $options.totalUnreadCount ? (_openBlock(), _createElementBlock(\"span\", _hoisted_43, _toDisplayString($options.totalUnreadCount), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */), _createCommentVNode(\" Добавляем панель со всеми личными сообщениями \"), $data.showAllMessages ? (_openBlock(), _createElementBlock(\"div\", _hoisted_44, [_createElementVNode(\"div\", _hoisted_45, [_cache[25] || (_cache[25] = _createElementVNode(\"h3\", null, \"Личные сообщения\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"close-btn\",\n    onClick: _cache[12] || (_cache[12] = $event => $data.showAllMessages = false)\n  }, \"✕\")]), _createElementVNode(\"div\", _hoisted_46, [$data.privateChats.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_47, \" У вас пока нет личных сообщений \")) : (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 1\n  }, _renderList($data.privateChats, chat => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: chat.userId,\n      class: \"chat-item\",\n      onClick: $event => $options.openPrivateChat(chat.user)\n    }, [_createElementVNode(\"div\", _hoisted_49, [chat.user.avatar_url ? (_openBlock(), _createElementBlock(\"div\", _hoisted_50, [_createElementVNode(\"img\", {\n      src: `http://localhost:8000${chat.user.avatar_url}`,\n      alt: \"Аватар\"\n    }, null, 8 /* PROPS */, _hoisted_51)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_52, [...(_cache[26] || (_cache[26] = [_createElementVNode(\"svg\", {\n      viewBox: \"0 0 24 24\",\n      fill: \"currentColor\"\n    }, [_createElementVNode(\"path\", {\n      d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"\n    })], -1 /* HOISTED */)]))]))]), _createElementVNode(\"div\", _hoisted_53, [_createElementVNode(\"div\", _hoisted_54, [_createElementVNode(\"span\", _hoisted_55, _toDisplayString(chat.user.username), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_56, _toDisplayString($options.formatDate(chat.lastMessage.created_at)), 1 /* TEXT */)]), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"last-message\", {\n        unread: chat.unreadCount\n      }])\n    }, _toDisplayString(chat.lastMessage.content), 3 /* TEXT, CLASS */)]), chat.unreadCount ? (_openBlock(), _createElementBlock(\"div\", _hoisted_57, _toDisplayString(chat.unreadCount), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_48);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","$data","messages","length","_hoisted_4","_Fragment","_renderList","$options","sortedMessages","message","id","_hoisted_5","_hoisted_6","avatar_url","_hoisted_7","src","alt","_hoisted_8","_hoisted_9","_cache","viewBox","fill","d","_hoisted_10","_toDisplayString","username","_hoisted_11","_hoisted_12","formatDate","created_at","canDeleteMessage","onClick","$event","confirmDelete","_hoisted_13","_createCommentVNode","_hoisted_14","content","_hoisted_15","showMentionPopup","_hoisted_16","filteredUsers","user","selectMention","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_17","showEmojiPicker","_hoisted_22","_hoisted_23","emojiCategories","category","name","currentCategory","_normalizeClass","active","icon","_hoisted_24","_hoisted_25","currentEmojis","emoji","addEmoji","_hoisted_26","_hoisted_27","newMessage","onKeyup","_withKeys","args","sendMessage","onInput","handleInput","onKeydown","handleKeydown","placeholder","disabled","loading","_hoisted_28","_withModifiers","toggleEmojiPicker","title","trim","_hoisted_29","showDeleteModal","_hoisted_30","_hoisted_31","_hoisted_32","deleteMessage","cancelDelete","_hoisted_33","_hoisted_34","activeUsers","showUserMenu","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","unreadCounts","openPrivateChat","_hoisted_41","_hoisted_35","showContextMenu","style","_normalizeStyle","top","contextMenuPosition","y","left","x","mentionUser","_createTextVNode","sendPrivateMessage","viewProfile","_hoisted_42","activeChats","chat","_createBlock","_component_PopupChat","userId","onClose","closeChat","showAllMessages","toggleAllMessages","totalUnreadCount","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","privateChats","_hoisted_47","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","lastMessage","unread","unreadCount","_hoisted_57","_hoisted_48"],"sources":["/home/dotcore/ichat/frontend/src/components/Chat.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <div class=\"chat\">\n      <div class=\"chat-messages\" ref=\"messagesContainer\">\n        <div v-if=\"messages.length === 0\" class=\"no-messages\">\n          Нет сообщений\n        </div>\n        <div v-else v-for=\"message in sortedMessages\" :key=\"message.id\" class=\"message\">\n          <div class=\"message-header\">\n            <div class=\"user-info\">\n              <div v-if=\"message.avatar_url\" class=\"message-avatar\">\n                <img \n                  :src=\"`http://localhost:8000${message.avatar_url}`\" \n                  alt=\"Аватар\"\n                >\n              </div>\n              <div v-else class=\"message-avatar default-avatar\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n                </svg>\n              </div>\n              <span class=\"username\">{{ message.username }}</span>\n            </div>\n            <div class=\"message-controls\">\n              <span class=\"timestamp\">{{ formatDate(message.created_at) }}</span>\n              <button \n                v-if=\"canDeleteMessage(message)\" \n                @click=\"confirmDelete(message)\"\n                class=\"delete-btn\"\n              >\n                ✕\n              </button>\n            </div>\n          </div>\n          <div class=\"message-content\">{{ message.content }}</div>\n        </div>\n      </div>\n      <div class=\"chat-input\">\n        <div class=\"mention-popup\" v-if=\"showMentionPopup\" ref=\"mentionPopup\">\n          <div \n            v-for=\"user in filteredUsers\" \n            :key=\"user.id\" \n            class=\"mention-item\"\n            @click=\"selectMention(user)\"\n          >\n            <div v-if=\"user.avatar_url\" class=\"mention-avatar\">\n              <img :src=\"`http://localhost:8000${user.avatar_url}`\" alt=\"Аватар\">\n            </div>\n            <div v-else class=\"mention-avatar default-avatar\">\n              <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n              </svg>\n            </div>\n            <span class=\"mention-username\">{{ user.username }}</span>\n          </div>\n        </div>\n        \n        <!-- Добавляем панель эмодзи -->\n        <div v-if=\"showEmojiPicker\" class=\"emoji-picker\" ref=\"emojiPicker\">\n          <div class=\"emoji-categories\">\n            <button \n              v-for=\"(category, name) in emojiCategories\" \n              :key=\"name\"\n              @click=\"currentCategory = name\"\n              :class=\"{ active: currentCategory === name }\"\n            >\n              {{ category.icon }}\n            </button>\n          </div>\n          <div class=\"emoji-list\">\n            <button \n              v-for=\"emoji in currentEmojis\" \n              :key=\"emoji\"\n              @click=\"addEmoji(emoji)\"\n              class=\"emoji-button\"\n            >\n              {{ emoji }}\n            </button>\n          </div>\n        </div>\n\n        <div class=\"input-wrapper\">\n          <input \n            v-model=\"newMessage\" \n            @keyup.enter=\"sendMessage\"\n            @input=\"handleInput\"\n            @keydown=\"handleKeydown\"\n            placeholder=\"Введите сообщение...\"\n            :disabled=\"loading\"\n            ref=\"messageInput\"\n          >\n          <span \n            class=\"emoji-trigger\"\n            @click.stop=\"toggleEmojiPicker\"\n            title=\"Добавить эмодзи\"\n          >\n            <i class=\"far fa-smile\"></i>\n          </span>\n        </div>\n        <button @click=\"sendMessage\" :disabled=\"!newMessage.trim() || loading\">\n          {{ loading ? 'Отправка...' : 'Отправить' }}\n        </button>\n      </div>\n\n      <div v-if=\"showDeleteModal\" class=\"modal\">\n        <div class=\"modal-content\">\n          <h3>Подтверждение удаления</h3>\n          <p>Вы действительно хотите удалить это сообщение?</p>\n          <div class=\"modal-buttons\">\n            <button @click=\"deleteMessage\" class=\"delete-confirm-btn\">Удалить</button>\n            <button @click=\"cancelDelete\" class=\"cancel-btn\">Отмена</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"users-list\">\n      <h3>Участники чата</h3>\n      <div class=\"users\">\n        <div v-for=\"user in activeUsers\" :key=\"user.id\" class=\"user-item\" @click=\"showUserMenu(user, $event)\">\n          <div v-if=\"user.avatar_url\" class=\"user-avatar\">\n            <img \n              :src=\"`http://localhost:8000${user.avatar_url}`\" \n              alt=\"Аватар\"\n            >\n          </div>\n          <div v-else class=\"user-avatar default-avatar\">\n            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n            </svg>\n          </div>\n          <div class=\"user-info-container\">\n            <span class=\"user-status\"></span>\n            <span class=\"user-name\">{{ user.username }}</span>\n            <span \n              v-if=\"unreadCounts[user.id]\" \n              class=\"unread-badge\"\n              @click.stop=\"openPrivateChat(user)\"\n            >\n              {{ unreadCounts[user.id] }}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Контекстное меню пользователя -->\n      <div v-if=\"showContextMenu\" \n           class=\"user-context-menu\"\n           :style=\"{ top: contextMenuPosition.y + 'px', left: contextMenuPosition.x + 'px' }\">\n        <div class=\"menu-item\" @click=\"mentionUser\">\n          <i class=\"fas fa-at\"></i> Упомянуть\n        </div>\n        <div class=\"menu-item\" @click=\"sendPrivateMessage\">\n          <i class=\"fas fa-envelope\"></i> Личное сообщение\n        </div>\n        <div class=\"menu-item\" @click=\"viewProfile\">\n          <i class=\"fas fa-user\"></i> Просмотреть профиль\n        </div>\n      </div>\n    </div>\n\n    <!-- Добавляем всплывающие чаты -->\n    <div class=\"popup-chats\">\n      <PopupChat\n        v-for=\"chat in activeChats\"\n        :key=\"chat.userId\"\n        :receiver-id=\"chat.userId\"\n        @close=\"closeChat(chat.userId)\"\n      />\n    </div>\n\n    <!-- Добавляем кнопку для открытия всех личных сообщений -->\n    <div class=\"messages-button\" @click=\"toggleAllMessages\" :class=\"{ active: showAllMessages }\">\n      <i class=\"fas fa-envelope\"></i>\n      <span v-if=\"totalUnreadCount\" class=\"total-unread\">{{ totalUnreadCount }}</span>\n    </div>\n\n    <!-- Добавляем панель со всеми личными сообщениями -->\n    <div v-if=\"showAllMessages\" class=\"all-messages-panel\">\n      <div class=\"panel-header\">\n        <h3>Личные сообщения</h3>\n        <button class=\"close-btn\" @click=\"showAllMessages = false\">✕</button>\n      </div>\n      <div class=\"messages-list\">\n        <div v-if=\"privateChats.length === 0\" class=\"no-chats\">\n          У вас пока нет личных сообщений\n        </div>\n        <div v-else v-for=\"chat in privateChats\" :key=\"chat.userId\" class=\"chat-item\" @click=\"openPrivateChat(chat.user)\">\n          <div class=\"chat-avatar\">\n            <div v-if=\"chat.user.avatar_url\" class=\"user-avatar\">\n              <img :src=\"`http://localhost:8000${chat.user.avatar_url}`\" alt=\"Аватар\">\n            </div>\n            <div v-else class=\"default-avatar\">\n              <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n              </svg>\n            </div>\n          </div>\n          <div class=\"chat-info\">\n            <div class=\"chat-header\">\n              <span class=\"username\">{{ chat.user.username }}</span>\n              <span class=\"timestamp\">{{ formatDate(chat.lastMessage.created_at) }}</span>\n            </div>\n            <div class=\"last-message\" :class=\"{ unread: chat.unreadCount }\">\n              {{ chat.lastMessage.content }}\n            </div>\n          </div>\n          <div v-if=\"chat.unreadCount\" class=\"unread-count\">\n            {{ chat.unreadCount }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { axiosInstance } from '../store/modules/auth'\nimport PopupChat from './PopupChat.vue'\n\nexport default {\n  name: 'Chat',\n  components: {\n    PopupChat\n  },\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      polling: null,\n      loading: false,\n      error: null,\n      showDeleteModal: false,\n      messageToDelete: null,\n      activeUsers: [],\n      showContextMenu: false,\n      contextMenuPosition: { x: 0, y: 0 },\n      selectedUser: null,\n      activeChats: [],\n      unreadCounts: {},\n      unreadPolling: null,\n      readMessagesByUser: {},\n      showAllMessages: false,\n      privateChats: [],\n      showMentionPopup: false,\n      mentionFilter: '',\n      mentionStartIndex: -1,\n      showEmojiPicker: false,\n      currentCategory: 'smileys',\n      emojiCategories: {\n        smileys: {\n          icon: '😊',\n          emojis: ['😀', '😃', '😄', '😁', '😅', '😂', '🤣', '😊', '😇', '🙂', '😉', '😌', '😍', '🥰', '😘']\n        },\n        gestures: {\n          icon: '👋',\n          emojis: ['👋', '🤚', '🖐️', '✋', '🖖', '👌', '🤌', '🤏', '✌️', '🤞', '🫰', '🤟', '🤘', '🤙', '👈']\n        },\n        hearts: {\n          icon: '❤️',\n          emojis: ['❤️', '🧡', '💛', '💚', '💙', '💜', '🤎', '🖤', '🤍', '💔', '❤️‍🔥', '❤️‍🩹', '💖', '💗', '💓']\n        },\n        symbols: {\n          icon: '💯',\n          emojis: ['💯', '💢', '💬', '👁️‍🗨️', '🗨️', '🗯️', '💭', '💪', '👍', '👎', '✨', '🎵', '🎶', '💋', '👏']\n        }\n      }\n    }\n  },\n  computed: {\n    userId() {\n      return this.$store.state.auth.userId\n    },\n    totalUnreadCount() {\n      return Object.values(this.unreadCounts).reduce((sum, count) => sum + count, 0)\n    },\n    filteredUsers() {\n      if (!this.mentionFilter) return this.activeUsers\n      const filter = this.mentionFilter.toLowerCase()\n      return this.activeUsers.filter(user => \n        user.username.toLowerCase().includes(filter)\n      )\n    },\n    sortedMessages() {\n      return [...this.messages].sort((a, b) => {\n        return new Date(a.created_at) - new Date(b.created_at)\n      })\n    },\n    currentEmojis() {\n      return this.emojiCategories[this.currentCategory].emojis\n    }\n  },\n  async created() {\n    await this.loadMessages()\n    await this.loadActiveUsers()\n    this.startPolling()\n    this.startUsersPolling()\n    this.startActivityTracking()\n    await this.updateUserActivity()\n    this.startUnreadPolling()\n  },\n  beforeUnmount() {\n    this.stopPolling()\n    this.stopUsersPolling()\n    this.stopActivityTracking()\n    document.removeEventListener('click', this.hideContextMenu)\n    this.stopUnreadPolling()\n    document.removeEventListener('click', this.handleClickOutside)\n  },\n  mounted() {\n    // Закрываем меню при клике вне его\n    document.addEventListener('click', this.hideContextMenu)\n    document.addEventListener('click', this.handleClickOutside)\n  },\n  methods: {\n    startPolling() {\n      this.polling = setInterval(this.loadMessages, 3000)\n    },\n    stopPolling() {\n      if (this.polling) {\n        clearInterval(this.polling)\n        this.polling = null\n      }\n    },\n    async loadMessages() {\n      try {\n        const response = await axiosInstance.get('/messages')\n        if (response.data) {\n          // Сохраняем текущую позицию прокрутки и высоту контента\n          const container = this.$refs.messagesContainer\n          const wasAtBottom = container ? \n            (container.scrollHeight - container.scrollTop - container.clientHeight < 50) : \n            false\n          const oldScrollHeight = container ? container.scrollHeight : 0\n\n          this.messages = response.data\n\n          // После обновления DOM прокручиваем к нужной позиции\n          this.$nextTick(() => {\n            if (wasAtBottom) {\n              // Если были внизу, прокручиваем к новым сообщениям\n              this.scrollToBottom()\n            } else if (container) {\n              // Иначе сохраняем текущую позицию просмотра\n              container.scrollTop = container.scrollHeight - oldScrollHeight\n            }\n          })\n        }\n      } catch (error) {\n        console.error('Error loading messages:', error)\n        this.error = 'Ошибка при загрузке сообщений'\n      }\n    },\n    async sendMessage() {\n      if (!this.newMessage.trim() || this.loading) return\n\n      this.loading = true\n      try {\n        const messageData = {\n          content: this.newMessage.trim(),\n          user_id: parseInt(this.userId)\n        }\n        await axiosInstance.post('/messages', messageData)\n        await this.updateUserActivity()\n        this.newMessage = ''\n        await this.loadMessages()\n        // Всегда прокручиваем к низу при отправке своего сообщения\n        this.scrollToBottom()\n      } catch (error) {\n        console.error('Error sending message:', error)\n        alert('Ошибка при отправке сообщения')\n      } finally {\n        this.loading = false\n      }\n    },\n    formatDate(dateStr) {\n      if (!dateStr) return ''\n      try {\n        const date = new Date(dateStr)\n        return date.toLocaleString('ru-RU', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          timeZone: 'Europe/Moscow'\n        })\n      } catch (e) {\n        console.error('Error formatting date:', e)\n        return 'Некорректная дата'\n      }\n    },\n    scrollToBottom() {\n      const container = this.$refs.messagesContainer\n      if (container) {\n        container.scrollTop = container.scrollHeight\n      }\n    },\n    canDeleteMessage(message) {\n      return message.user_id === parseInt(this.userId)\n    },\n    confirmDelete(message) {\n      this.messageToDelete = message\n      this.showDeleteModal = true\n    },\n    cancelDelete() {\n      this.messageToDelete = null\n      this.showDeleteModal = false\n    },\n    async deleteMessage() {\n      if (!this.messageToDelete) return\n\n      try {\n        await axiosInstance.delete(`/messages/${this.messageToDelete.id}?current_user_id=${this.userId}`)\n        await this.loadMessages()\n        this.showDeleteModal = false\n        this.messageToDelete = null\n      } catch (error) {\n        console.error('Error deleting message:', error)\n        alert('Ошибка при удалении сообщения')\n      }\n    },\n    async loadActiveUsers() {\n      try {\n        const response = await axiosInstance.get('/users/active')\n        this.activeUsers = response.data\n      } catch (error) {\n        console.error('Error loading active users:', error)\n      }\n    },\n    startUsersPolling() {\n      this.usersPolling = setInterval(this.loadActiveUsers, 10000)\n    },\n    stopUsersPolling() {\n      if (this.usersPolling) {\n        clearInterval(this.usersPolling)\n        this.usersPolling = null\n      }\n    },\n    async updateUserActivity() {\n      try {\n        await axiosInstance.post(`/users/${this.userId}/heartbeat`)\n      } catch (error) {\n        console.error('Error updating user activity:', error)\n      }\n    },\n    startActivityTracking() {\n      this.activityInterval = setInterval(this.updateUserActivity, 30000)\n      window.addEventListener('mousemove', this.updateUserActivity)\n      window.addEventListener('keydown', this.updateUserActivity)\n    },\n    stopActivityTracking() {\n      if (this.activityInterval) {\n        clearInterval(this.activityInterval)\n        this.activityInterval = null\n      }\n      window.removeEventListener('mousemove', this.updateUserActivity)\n      window.removeEventListener('keydown', this.updateUserActivity)\n    },\n    showUserMenu(user, event) {\n      event.preventDefault()\n      event.stopPropagation()\n      \n      this.selectedUser = user\n      this.contextMenuPosition = {\n        x: event.clientX,\n        y: event.clientY\n      }\n      this.showContextMenu = true\n    },\n    hideContextMenu(event) {\n      if (!event.target.closest('.user-context-menu')) {\n        this.showContextMenu = false\n      }\n    },\n    mentionUser() {\n      if (this.selectedUser) {\n        this.newMessage = `${this.newMessage}@${this.selectedUser.username} `\n        this.$refs.messageInput?.focus()\n      }\n      this.showContextMenu = false\n    },\n    async openPrivateChat(user) {\n      const userId = user.id\n      if (!this.activeChats.find(chat => chat.userId === userId)) {\n        this.activeChats.push({ userId })\n        \n        try {\n          const response = await axiosInstance.get(\n            `/private-messages/${userId}`,\n            { \n              headers: {\n                'X-Current-User-Id': this.userId\n              }\n            }\n          )\n          \n          const unreadMessages = response.data.filter(\n            msg => msg.receiver_id === this.userId && !msg.is_read\n          )\n          \n          // Отмечаем все непрочитанные сообщения как прочитанные\n          for (const msg of unreadMessages) {\n            await axiosInstance.put(\n              `/private-messages/${msg.id}/read`,\n              null,\n              {\n                headers: {\n                  'X-Current-User-Id': this.userId\n                }\n              }\n            )\n          }\n\n          // Сохраняем последнее прочитанное время для этого пользователя\n          this.readMessagesByUser[userId] = new Date().toISOString()\n          \n          await this.loadUnreadCounts()\n        } catch (error) {\n          console.error('Error marking messages as read:', error)\n        }\n      }\n      \n      // Закрываем окно списка личных сообщений\n      this.showAllMessages = false\n    },\n    sendPrivateMessage() {\n      this.openPrivateChat(this.selectedUser)\n      this.showContextMenu = false\n    },\n    viewProfile() {\n      this.$router.push(`/profile/${this.selectedUser.id}`)\n      this.showContextMenu = false\n    },\n    closeChat(userId) {\n      // Сохраняем время закрытия чата как время последнего прочтения\n      this.readMessagesByUser[userId] = new Date().toISOString()\n      this.activeChats = this.activeChats.filter(chat => chat.userId !== userId)\n      this.loadUnreadCounts()\n    },\n    async loadUnreadCounts() {\n      try {\n        const response = await axiosInstance.get('/private-messages-unread', {\n          headers: {\n            'X-Current-User-Id': this.userId\n          }\n        })\n        \n        // Получаем все сообщения для каждого пользователя с непрочитанными сообщениями\n        const counts = { ...response.data }\n        \n        // Проверяем каждого пользователя с непрочитанными сообщениями\n        for (const userId in counts) {\n          try {\n            const messagesResponse = await axiosInstance.get(\n              `/private-messages/${userId}`,\n              { \n                headers: {\n                  'X-Current-User-Id': this.userId\n                }\n              }\n            )\n            \n            // Фильтруем только те сообщения, которые пришли после последнего прочтения\n            const lastReadTime = this.readMessagesByUser[userId]\n            if (lastReadTime) {\n              const unreadCount = messagesResponse.data.filter(msg => \n                msg.receiver_id === this.userId && \n                msg.created_at > lastReadTime\n              ).length\n              \n              if (unreadCount === 0) {\n                delete counts[userId]\n              } else {\n                counts[userId] = unreadCount\n              }\n            }\n          } catch (error) {\n            console.error('Error loading messages for user:', userId, error)\n          }\n        }\n        \n        // Исключаем открытые чаты\n        this.activeChats.forEach(chat => {\n          delete counts[chat.userId]\n        })\n        \n        this.unreadCounts = counts\n      } catch (error) {\n        console.error('Error loading unread counts:', error)\n      }\n    },\n    startUnreadPolling() {\n      this.loadUnreadCounts()\n      this.unreadPolling = setInterval(this.loadUnreadCounts, 3000)\n    },\n    stopUnreadPolling() {\n      if (this.unreadPolling) {\n        clearInterval(this.unreadPolling)\n        this.unreadPolling = null\n      }\n    },\n    async toggleAllMessages() {\n      this.showAllMessages = !this.showAllMessages\n      if (this.showAllMessages) {\n        await this.loadPrivateChats()\n      }\n    },\n    async loadPrivateChats() {\n      try {\n        const response = await axiosInstance.get('/pm-chats', {\n          headers: {\n            'X-Current-User-Id': this.userId\n          }\n        })\n        this.privateChats = response.data\n        console.log('Loaded chats:', this.privateChats) // Для отладки\n      } catch (error) {\n        console.error('Error loading private chats:', error)\n      }\n    },\n    handleInput(event) {\n      const text = event.target.value\n      const lastAtIndex = text.lastIndexOf('@')\n      \n      if (lastAtIndex !== -1 && (lastAtIndex === 0 || text[lastAtIndex - 1] === ' ')) {\n        this.mentionStartIndex = lastAtIndex\n        this.mentionFilter = text.slice(lastAtIndex + 1)\n        this.showMentionPopup = true\n      } else if (this.showMentionPopup && this.mentionStartIndex !== -1) {\n        this.mentionFilter = text.slice(this.mentionStartIndex + 1)\n        if (!this.mentionFilter || text[this.mentionStartIndex] !== '@') {\n          this.closeMentionPopup()\n        }\n      }\n    },\n    handleKeydown(event) {\n      if (!this.showMentionPopup) return\n\n      if (event.key === 'Escape') {\n        this.closeMentionPopup()\n      }\n    },\n    selectMention(user) {\n      const beforeMention = this.newMessage.slice(0, this.mentionStartIndex)\n      const afterMention = this.newMessage.slice(this.mentionStartIndex + this.mentionFilter.length + 1)\n      this.newMessage = `${beforeMention}@${user.username} ${afterMention}`\n      this.closeMentionPopup()\n      this.$refs.messageInput.focus()\n    },\n    closeMentionPopup() {\n      this.showMentionPopup = false\n      this.mentionFilter = ''\n      this.mentionStartIndex = -1\n    },\n    toggleEmojiPicker() {\n      this.showEmojiPicker = !this.showEmojiPicker\n    },\n    addEmoji(emoji) {\n      const cursorPosition = this.$refs.messageInput.selectionStart\n      const textBeforeCursor = this.newMessage.slice(0, cursorPosition)\n      const textAfterCursor = this.newMessage.slice(cursorPosition)\n      this.newMessage = textBeforeCursor + emoji + textAfterCursor\n      \n      // Устанавливаем курсор после вставленного эмодзи\n      this.$nextTick(() => {\n        const newPosition = cursorPosition + emoji.length\n        this.$refs.messageInput.setSelectionRange(newPosition, newPosition)\n        this.$refs.messageInput.focus()\n      })\n    },\n    handleClickOutside(event) {\n      const emojiPicker = this.$refs.emojiPicker\n      const emojiTrigger = event.target.closest('.emoji-trigger')\n      \n      if (emojiPicker && !emojiPicker.contains(event.target) && !emojiTrigger) {\n        this.showEmojiPicker = false\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-container {\n  display: flex;\n  gap: 20px;\n  height: calc(100vh - 100px);\n  padding: 20px;\n}\n\n.chat {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-messages {\n  flex-grow: 1;\n  overflow-y: auto;\n  margin-bottom: 20px;\n  padding: 10px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.no-messages {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n}\n\n.message {\n  margin-bottom: 15px;\n  padding: 10px;\n  background: #f5f5f5;\n  border-radius: 4px;\n}\n\n.message-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 5px;\n}\n\n.message-controls {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.message-avatar,\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  overflow: hidden;\n  flex-shrink: 0;\n}\n\n.message-avatar img,\n.user-avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.default-avatar {\n  background-color: #e0e0e0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n}\n\n.default-avatar svg {\n  width: 24px;\n  height: 24px;\n  color: #757575;\n}\n\n.username {\n  font-weight: bold;\n  color: #42b983;\n}\n\n.timestamp {\n  color: #666;\n  font-size: 0.8em;\n}\n\n.message-content {\n  margin-left: 50px;\n  word-break: break-word;\n}\n\n.chat-input {\n  position: relative;\n  display: flex;\n  gap: 10px;\n}\n\n.input-wrapper {\n  position: relative;\n  flex-grow: 1;\n  display: flex;\n  align-items: center;\n}\n\ninput {\n  width: 100%;\n  padding: 10px;\n  padding-right: 40px; /* Место для кнопки эмодзи */\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.emoji-trigger {\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n  cursor: pointer;\n  color: #999;\n  transition: color 0.2s;\n  padding: 5px;\n}\n\n.emoji-trigger:hover {\n  color: #666;\n}\n\n.emoji-trigger i {\n  font-size: 1.2em;\n}\n\n.emoji-picker {\n  position: absolute;\n  bottom: 100%;\n  right: 0; /* Изменено с left: 0 на right: 0 */\n  width: 300px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);\n  margin-bottom: 10px;\n  padding: 10px;\n  z-index: 1000;\n}\n\n.mention-popup {\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  width: 200px;\n  max-height: 200px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);\n  overflow-y: auto;\n  z-index: 1000;\n  margin-bottom: 5px;\n}\n\n.mention-item {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 8px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.mention-item:hover {\n  background-color: #f5f5f5;\n}\n\n.mention-avatar {\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  overflow: hidden;\n}\n\n.mention-avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.mention-username {\n  font-size: 0.9em;\n  color: #333;\n}\n\n.chat-input button {\n  min-width: 100px;\n  padding: 10px 20px;\n  background: #42b983;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.chat-input button:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.delete-btn {\n  background: none;\n  border: none;\n  color: #999;\n  cursor: pointer;\n  padding: 0 5px;\n  font-size: 1.2em;\n  line-height: 1;\n}\n\n.delete-btn:hover {\n  color: #ff4444;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 300px;\n  text-align: center;\n}\n\n.modal-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.delete-confirm-btn {\n  background: #ff4444;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.delete-confirm-btn:hover {\n  background: #ff2222;\n}\n\n.cancel-btn {\n  background: #666;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.cancel-btn:hover {\n  background: #555;\n}\n\n.users-list {\n  width: 250px;\n  background: white;\n  border-radius: 8px;\n  padding: 15px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.users-list h3 {\n  margin: 0 0 15px 0;\n  color: #333;\n  font-size: 1.1em;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n.users {\n  overflow-y: auto;\n  max-height: calc(100% - 50px);\n}\n\n.user-item {\n  display: flex;\n  align-items: center;\n  padding: 8px 0;\n  border-bottom: 1px solid #f5f5f5;\n  gap: 12px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.user-item:hover {\n  background-color: #f5f5f5;\n}\n\n.user-info-container {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  flex-grow: 1;\n  padding-right: 8px;\n}\n\n.user-status {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: #42b983;\n  flex-shrink: 0;\n}\n\n.user-name {\n  color: #333;\n  font-size: 0.9em;\n}\n\n.user-context-menu {\n  position: fixed;\n  background: white;\n  border-radius: 4px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  padding: 8px 0;\n  z-index: 1000;\n  min-width: 200px;\n}\n\n.menu-item {\n  padding: 8px 16px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  transition: background-color 0.2s;\n}\n\n.menu-item:hover {\n  background-color: #f5f5f5;\n}\n\n.menu-item i {\n  width: 16px;\n  color: #666;\n}\n\n.popup-chats {\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  display: flex;\n  flex-direction: row-reverse;\n  gap: 20px;\n  padding: 0 20px;\n  pointer-events: none;\n}\n\n.popup-chats > * {\n  pointer-events: auto;\n}\n\n.unread-badge {\n  background-color: #ff4444;\n  color: white;\n  border-radius: 50%;\n  min-width: 20px;\n  height: 20px;\n  padding: 0 6px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: auto;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.unread-badge:hover {\n  background-color: #ff2222;\n}\n\n.messages-button {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background: #42b983;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n  transition: transform 0.2s;\n  z-index: 1000;\n}\n\n.messages-button:hover {\n  transform: scale(1.1);\n}\n\n.messages-button.active {\n  background: #3aa876;\n}\n\n.messages-button i {\n  font-size: 24px;\n}\n\n.total-unread {\n  position: absolute;\n  top: -5px;\n  right: -5px;\n  background: #ff4444;\n  color: white;\n  border-radius: 50%;\n  min-width: 20px;\n  height: 20px;\n  padding: 0 6px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.all-messages-panel {\n  position: fixed;\n  bottom: 90px;\n  right: 20px;\n  width: 300px;\n  height: 400px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  z-index: 999;\n}\n\n.panel-header {\n  padding: 15px;\n  border-bottom: 1px solid #eee;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.panel-header h3 {\n  margin: 0;\n  color: #333;\n}\n\n.messages-list {\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n}\n\n.chat-item {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 10px;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 0.2s;\n}\n\n.chat-item:hover {\n  background-color: #f5f5f5;\n}\n\n.chat-avatar {\n  width: 40px;\n  height: 40px;\n  flex-shrink: 0;\n}\n\n.chat-info {\n  flex-grow: 1;\n  min-width: 0;\n}\n\n.chat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 4px;\n}\n\n.chat-header .timestamp {\n  font-size: 0.8em;\n  color: #666;\n}\n\n.last-message {\n  color: #666;\n  font-size: 0.9em;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.last-message.unread {\n  color: #333;\n  font-weight: bold;\n}\n\n.unread-count {\n  background: #42b983;\n  color: white;\n  border-radius: 50%;\n  min-width: 20px;\n  height: 20px;\n  padding: 0 6px;\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.no-chats {\n  text-align: center;\n  color: #666;\n  padding: 20px;\n  font-style: italic;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}