{"ast":null,"code":"import { axiosInstance } from '../store/modules/auth';\nexport default {\n  name: 'PopupChat',\n  props: {\n    receiverId: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      loading: false,\n      receiver: {},\n      polling: null,\n      minimized: false\n    };\n  },\n  computed: {\n    currentUserId() {\n      return this.$store.state.auth.userId;\n    }\n  },\n  async created() {\n    await this.loadReceiverInfo();\n    await this.loadMessages();\n    this.startPolling();\n  },\n  beforeUnmount() {\n    this.stopPolling();\n  },\n  methods: {\n    async loadReceiverInfo() {\n      try {\n        const response = await axiosInstance.get(`/users/${this.receiverId}`);\n        this.receiver = response.data;\n      } catch (error) {\n        console.error('Error loading receiver info:', error);\n      }\n    },\n    async loadMessages() {\n      try {\n        const response = await axiosInstance.get(`/private-messages/${this.receiverId}`, {\n          params: {\n            current_user_id: this.currentUserId\n          }\n        });\n        this.messages = response.data;\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n      } catch (error) {\n        console.error('Error loading messages:', error);\n      }\n    },\n    async sendMessage() {\n      if (!this.newMessage.trim() || this.loading) return;\n      this.loading = true;\n      try {\n        await axiosInstance.post('/private-messages', {\n          content: this.newMessage.trim(),\n          receiver_id: parseInt(this.receiverId)\n        }, {\n          headers: {\n            'X-Current-User-Id': this.currentUserId\n          }\n        });\n        this.newMessage = '';\n        await this.loadMessages();\n      } catch (error) {\n        console.error('Error sending message:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    startPolling() {\n      this.polling = setInterval(this.loadMessages, 3000);\n    },\n    stopPolling() {\n      if (this.polling) {\n        clearInterval(this.polling);\n        this.polling = null;\n      }\n    },\n    scrollToBottom() {\n      const container = this.$refs.messagesContainer;\n      if (container) {\n        container.scrollTop = container.scrollHeight;\n      }\n    },\n    formatDate(dateStr) {\n      if (!dateStr) return '';\n      const date = new Date(dateStr);\n      return date.toLocaleString('ru-RU', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    toggleMinimize() {\n      this.minimized = !this.minimized;\n    },\n    closeChat() {\n      this.$emit('close');\n    }\n  }\n};","map":{"version":3,"names":["axiosInstance","name","props","receiverId","type","String","Number","required","data","messages","newMessage","loading","receiver","polling","minimized","computed","currentUserId","$store","state","auth","userId","created","loadReceiverInfo","loadMessages","startPolling","beforeUnmount","stopPolling","methods","response","get","error","console","params","current_user_id","$nextTick","scrollToBottom","sendMessage","trim","post","content","receiver_id","parseInt","headers","setInterval","clearInterval","container","$refs","messagesContainer","scrollTop","scrollHeight","formatDate","dateStr","date","Date","toLocaleString","hour","minute","toggleMinimize","closeChat","$emit"],"sources":["/home/dotcore/ichat/frontend/src/components/PopupChat.vue"],"sourcesContent":["<template>\n  <div class=\"popup-chat\" :class=\"{ minimized }\">\n    <div class=\"chat-header\" @click=\"toggleMinimize\">\n      <div class=\"user-info\">\n        <div v-if=\"receiver.avatar_url\" class=\"user-avatar\">\n          <img :src=\"`http://localhost:8000${receiver.avatar_url}`\" alt=\"Аватар\">\n        </div>\n        <div v-else class=\"user-avatar default-avatar\">\n          <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n          </svg>\n        </div>\n        <span class=\"username\">{{ receiver.username }}</span>\n      </div>\n      <div class=\"chat-controls\">\n        <button class=\"minimize-btn\">\n          {{ minimized ? '△' : '▽' }}\n        </button>\n        <button class=\"close-btn\" @click.stop=\"closeChat\">✕</button>\n      </div>\n    </div>\n\n    <div v-if=\"!minimized\" class=\"chat-content\">\n      <div class=\"messages\" ref=\"messagesContainer\">\n        <div v-for=\"message in messages\" :key=\"message.id\" \n             :class=\"['message', { 'own-message': message.sender_id === currentUserId }]\">\n          <div class=\"message-content\">{{ message.content }}</div>\n          <div class=\"message-info\">\n            <span class=\"timestamp\">{{ formatDate(message.created_at) }}</span>\n            <span v-if=\"message.sender_id === currentUserId\" class=\"read-status\">\n              {{ message.is_read ? '✓✓' : '✓' }}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"input-area\">\n        <input \n          v-model=\"newMessage\" \n          @keyup.enter=\"sendMessage\"\n          placeholder=\"Введите сообщение...\"\n          :disabled=\"loading\"\n        >\n        <button @click=\"sendMessage\" :disabled=\"!newMessage.trim() || loading\">\n          <i class=\"fas fa-paper-plane\"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { axiosInstance } from '../store/modules/auth'\n\nexport default {\n  name: 'PopupChat',\n  props: {\n    receiverId: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      loading: false,\n      receiver: {},\n      polling: null,\n      minimized: false\n    }\n  },\n  computed: {\n    currentUserId() {\n      return this.$store.state.auth.userId\n    }\n  },\n  async created() {\n    await this.loadReceiverInfo()\n    await this.loadMessages()\n    this.startPolling()\n  },\n  beforeUnmount() {\n    this.stopPolling()\n  },\n  methods: {\n    async loadReceiverInfo() {\n      try {\n        const response = await axiosInstance.get(`/users/${this.receiverId}`)\n        this.receiver = response.data\n      } catch (error) {\n        console.error('Error loading receiver info:', error)\n      }\n    },\n    async loadMessages() {\n      try {\n        const response = await axiosInstance.get(\n          `/private-messages/${this.receiverId}`, \n          { params: { current_user_id: this.currentUserId } }\n        )\n        this.messages = response.data\n        this.$nextTick(() => {\n          this.scrollToBottom()\n        })\n      } catch (error) {\n        console.error('Error loading messages:', error)\n      }\n    },\n    async sendMessage() {\n      if (!this.newMessage.trim() || this.loading) return\n\n      this.loading = true\n      try {\n        await axiosInstance.post('/private-messages', \n          {\n            content: this.newMessage.trim(),\n            receiver_id: parseInt(this.receiverId)\n          },\n          {\n            headers: {\n              'X-Current-User-Id': this.currentUserId\n            }\n          }\n        )\n        this.newMessage = ''\n        await this.loadMessages()\n      } catch (error) {\n        console.error('Error sending message:', error)\n      } finally {\n        this.loading = false\n      }\n    },\n    startPolling() {\n      this.polling = setInterval(this.loadMessages, 3000)\n    },\n    stopPolling() {\n      if (this.polling) {\n        clearInterval(this.polling)\n        this.polling = null\n      }\n    },\n    scrollToBottom() {\n      const container = this.$refs.messagesContainer\n      if (container) {\n        container.scrollTop = container.scrollHeight\n      }\n    },\n    formatDate(dateStr) {\n      if (!dateStr) return ''\n      const date = new Date(dateStr)\n      return date.toLocaleString('ru-RU', {\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n    },\n    toggleMinimize() {\n      this.minimized = !this.minimized\n    },\n    closeChat() {\n      this.$emit('close')\n    }\n  }\n}\n</script>\n\n<style scoped>\n.popup-chat {\n  position: fixed;\n  bottom: 0;\n  right: 20px;\n  width: 300px;\n  background: white;\n  border-radius: 8px 8px 0 0;\n  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  z-index: 1000;\n}\n\n.chat-header {\n  padding: 10px;\n  background: #42b983;\n  color: white;\n  border-radius: 8px 8px 0 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  cursor: pointer;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.user-avatar {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  overflow: hidden;\n}\n\n.user-avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.default-avatar {\n  background-color: #e0e0e0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n}\n\n.default-avatar svg {\n  width: 20px;\n  height: 20px;\n  color: #757575;\n}\n\n.chat-controls {\n  display: flex;\n  gap: 5px;\n}\n\n.minimize-btn, .close-btn {\n  background: none;\n  border: none;\n  color: white;\n  cursor: pointer;\n  padding: 0 5px;\n}\n\n.chat-content {\n  height: 400px;\n  display: flex;\n  flex-direction: column;\n}\n\n.messages {\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.message {\n  max-width: 80%;\n  padding: 8px;\n  border-radius: 8px;\n  background: #f5f5f5;\n}\n\n.own-message {\n  align-self: flex-end;\n  background: #e3f2fd;\n}\n\n.message-content {\n  margin-bottom: 4px;\n  word-break: break-word;\n}\n\n.message-info {\n  display: flex;\n  justify-content: flex-end;\n  gap: 5px;\n  font-size: 0.8em;\n  color: #666;\n}\n\n.input-area {\n  padding: 10px;\n  border-top: 1px solid #eee;\n  display: flex;\n  gap: 10px;\n}\n\n.input-area input {\n  flex-grow: 1;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.input-area button {\n  padding: 8px;\n  background: #42b983;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.input-area button:disabled {\n  background: #ccc;\n}\n\n.minimized {\n  height: auto;\n}\n\n.minimized .chat-content {\n  display: none;\n}\n\n.read-status {\n  color: #42b983;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}