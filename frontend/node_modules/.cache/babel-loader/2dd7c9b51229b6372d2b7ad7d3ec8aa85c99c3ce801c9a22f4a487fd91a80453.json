{"ast":null,"code":"import { axiosInstance } from '../store/modules/auth';\nimport { emojiCategories } from '../utils/emojis';\nexport default {\n  name: 'PopupChat',\n  props: {\n    receiverId: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      loading: false,\n      receiver: {},\n      polling: null,\n      minimized: false,\n      showDeleteModal: false,\n      messageToDelete: null,\n      showMentionPopup: false,\n      mentionFilter: '',\n      mentionStartIndex: -1,\n      activeUsers: [],\n      showEmojiPicker: false,\n      currentCategory: 'smileys',\n      emojiCategories,\n      selectedFiles: [],\n      notificationSound: null,\n      unreadMessagesCount: 0,\n      originalTitle: document.title,\n      titleInterval: null\n    };\n  },\n  computed: {\n    currentUserId() {\n      return this.$store.state.auth.userId;\n    },\n    filteredUsers() {\n      if (!this.mentionFilter) return this.activeUsers;\n      const filter = this.mentionFilter.toLowerCase();\n      return this.activeUsers.filter(user => user.username.toLowerCase().includes(filter));\n    },\n    currentEmojis() {\n      return this.emojiCategories[this.currentCategory].emojis;\n    }\n  },\n  async created() {\n    await this.loadReceiverInfo();\n    await this.loadMessages();\n    await this.loadActiveUsers();\n    this.startPolling();\n    this.notificationSound = new Audio('/sounds/notification.mp3');\n    this.originalTitle = document.title;\n  },\n  beforeUnmount() {\n    this.stopPolling();\n    this.clearTitleNotification();\n  },\n  methods: {\n    async loadReceiverInfo() {\n      try {\n        const response = await axiosInstance.get(`/users/${this.receiverId}`);\n        this.receiver = response.data;\n      } catch (error) {\n        console.error('Error loading receiver info:', error);\n      }\n    },\n    async loadMessages() {\n      try {\n        const response = await axiosInstance.get(`/private-messages/${this.receiverId}`, {\n          headers: {\n            'X-Current-User-Id': this.currentUserId\n          }\n        });\n\n        // Проверяем, есть ли новые сообщения\n        const newMessages = response.data.filter(msg => !this.messages.some(existingMsg => existingMsg.id === msg.id) && msg.sender_id !== this.currentUserId);\n\n        // Если есть новые сообщения и чат не активен, воспроизводим звук\n        if (newMessages.length > 0 && this.minimized) {\n          this.playNotificationSound();\n          this.showTitleNotification();\n        }\n        this.messages = response.data;\n\n        // Отмечаем непрочитанные сообщения как прочитанные, если чат открыт\n        if (!this.minimized) {\n          const unreadMessages = this.messages.filter(msg => msg.receiver_id === this.currentUserId && !msg.is_read);\n          for (const msg of unreadMessages) {\n            await this.markAsRead(msg.id);\n          }\n\n          // Если чат открыт и мы прочитали сообщения, убираем уведомление\n          if (unreadMessages.length > 0) {\n            this.clearTitleNotification();\n          }\n        } else {\n          // Если чат свернут, считаем непрочитанные сообщения\n          this.unreadMessagesCount = this.messages.filter(msg => msg.receiver_id === this.currentUserId && !msg.is_read).length;\n        }\n\n        // Прокручиваем к последнему сообщению при первой загрузке\n        if (this.isFirstLoad) {\n          this.$nextTick(() => {\n            this.scrollToBottom();\n            this.isFirstLoad = false;\n          });\n        }\n      } catch (error) {\n        console.error('Error loading messages:', error);\n      }\n    },\n    async sendMessage() {\n      if (this.newMessage.trim() === '' && this.selectedFiles.length === 0 || this.loading) {\n        return;\n      }\n      this.loading = true;\n      try {\n        // Сначала загружаем файлы, если они есть\n        let attachments = [];\n        if (this.selectedFiles.length > 0) {\n          const formData = new FormData();\n          this.selectedFiles.forEach(file => {\n            formData.append('files', file);\n          });\n          const response = await axiosInstance.post('/private-messages/attachments', formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n              'X-Current-User-Id': this.currentUserId\n            }\n          });\n          attachments = response.data.attachments;\n        }\n\n        // Затем отправляем сообщение с вложениями\n        const messageData = {\n          content: this.newMessage.trim(),\n          receiver_id: parseInt(this.receiverId),\n          attachments: attachments\n        };\n        await axiosInstance.post('/private-messages', messageData, {\n          headers: {\n            'X-Current-User-Id': this.currentUserId\n          }\n        });\n\n        // Очищаем поле ввода и список файлов\n        this.newMessage = '';\n        this.selectedFiles = [];\n\n        // Обновляем список сообщений\n        await this.loadMessages();\n\n        // Прокручиваем к последнему сообщению\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n      } catch (error) {\n        console.error('Error sending message:', error);\n        alert('Ошибка при отправке сообщения: ' + (error.response?.data?.detail || error.message));\n      } finally {\n        this.loading = false;\n      }\n    },\n    startPolling() {\n      this.polling = setInterval(this.loadMessages, 3000);\n    },\n    stopPolling() {\n      if (this.polling) {\n        clearInterval(this.polling);\n        this.polling = null;\n      }\n    },\n    scrollToBottom() {\n      const container = this.$refs.messagesContainer;\n      if (container) {\n        container.scrollTop = container.scrollHeight;\n      }\n    },\n    formatDate(dateStr) {\n      if (!dateStr) return '';\n      const date = new Date(dateStr);\n      return date.toLocaleString('ru-RU', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    toggleMinimize() {\n      this.minimized = !this.minimized;\n\n      // Если открываем чат, отмечаем сообщения как прочитанные\n      if (!this.minimized) {\n        this.markAllAsRead();\n        this.clearTitleNotification();\n      }\n    },\n    closeChat() {\n      this.$emit('close');\n    },\n    confirmDelete(message) {\n      this.messageToDelete = message;\n      this.showDeleteModal = true;\n    },\n    cancelDelete() {\n      this.messageToDelete = null;\n      this.showDeleteModal = false;\n    },\n    async deleteMessage() {\n      if (!this.messageToDelete) return;\n      try {\n        await axiosInstance.delete(`/private-messages/${this.messageToDelete.id}`, {\n          headers: {\n            'X-Current-User-Id': this.currentUserId\n          }\n        });\n        await this.loadMessages();\n        this.showDeleteModal = false;\n        this.messageToDelete = null;\n      } catch (error) {\n        console.error('Error deleting message:', error);\n      }\n    },\n    async loadActiveUsers() {\n      try {\n        const response = await axiosInstance.get('/users/active');\n        this.activeUsers = response.data;\n      } catch (error) {\n        console.error('Error loading active users:', error);\n      }\n    },\n    handleInput(event) {\n      const text = event.target.value;\n      const lastAtIndex = text.lastIndexOf('@');\n      if (lastAtIndex !== -1 && (lastAtIndex === 0 || text[lastAtIndex - 1] === ' ')) {\n        this.mentionStartIndex = lastAtIndex;\n        this.mentionFilter = text.slice(lastAtIndex + 1);\n        this.showMentionPopup = true;\n      } else if (this.showMentionPopup && this.mentionStartIndex !== -1) {\n        this.mentionFilter = text.slice(this.mentionStartIndex + 1);\n        if (!this.mentionFilter || text[this.mentionStartIndex] !== '@') {\n          this.closeMentionPopup();\n        }\n      }\n    },\n    handleKeydown(event) {\n      if (!this.showMentionPopup) return;\n      if (event.key === 'Escape') {\n        this.closeMentionPopup();\n      }\n    },\n    selectMention(user) {\n      const beforeMention = this.newMessage.slice(0, this.mentionStartIndex);\n      const afterMention = this.newMessage.slice(this.mentionStartIndex + this.mentionFilter.length + 1);\n      this.newMessage = `${beforeMention}@${user.username} ${afterMention}`;\n      this.closeMentionPopup();\n      this.$refs.messageInput.focus();\n    },\n    closeMentionPopup() {\n      this.showMentionPopup = false;\n      this.mentionFilter = '';\n      this.mentionStartIndex = -1;\n    },\n    handleFileSelect(event) {\n      const files = Array.from(event.target.files);\n      if (files.length > 3) {\n        alert('Можно прикрепить максимум 3 файла');\n        return;\n      }\n      this.selectedFiles = files;\n    },\n    removeFile(index) {\n      this.selectedFiles.splice(index, 1);\n      if (this.selectedFiles.length === 0) {\n        this.$refs.fileInput.value = '';\n      }\n    },\n    formatFileSize(bytes) {\n      if (bytes < 1024) return bytes + ' B';else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';else return (bytes / 1048576).toFixed(1) + ' MB';\n    },\n    toggleEmojiPicker() {\n      this.showEmojiPicker = !this.showEmojiPicker;\n    },\n    addEmoji(emoji) {\n      const cursorPosition = this.$refs.messageInput.selectionStart;\n      const textBeforeCursor = this.newMessage.slice(0, cursorPosition);\n      const textAfterCursor = this.newMessage.slice(cursorPosition);\n      this.newMessage = textBeforeCursor + emoji + textAfterCursor;\n      this.$nextTick(() => {\n        const newPosition = cursorPosition + emoji.length;\n        this.$refs.messageInput.setSelectionRange(newPosition, newPosition);\n        this.$refs.messageInput.focus();\n      });\n      this.showEmojiPicker = false;\n    },\n    async markAsRead(messageId) {\n      try {\n        await axiosInstance.put(`/private-messages/${messageId}/read`, null, {\n          headers: {\n            'X-Current-User-Id': this.currentUserId\n          }\n        });\n        await this.loadMessages();\n      } catch (error) {\n        console.error('Error marking message as read:', error);\n      }\n    },\n    async markAllAsRead() {\n      const unreadMessages = this.messages.filter(msg => msg.receiver_id === this.currentUserId && !msg.is_read);\n      for (const msg of unreadMessages) {\n        await this.markAsRead(msg.id);\n      }\n      this.unreadMessagesCount = 0;\n    },\n    playNotificationSound() {\n      try {\n        this.notificationSound.currentTime = 0;\n        this.notificationSound.play();\n      } catch (error) {\n        console.error('Error playing notification sound:', error);\n      }\n    },\n    showTitleNotification() {\n      if (this.titleInterval) return; // Уже показывается\n\n      this.titleInterval = setInterval(() => {\n        document.title = document.title === this.originalTitle ? `(${this.unreadMessagesCount}) Новое сообщение` : this.originalTitle;\n      }, 1000);\n\n      // Добавляем favicon с уведомлением\n      this.updateFavicon(true);\n    },\n    clearTitleNotification() {\n      if (this.titleInterval) {\n        clearInterval(this.titleInterval);\n        this.titleInterval = null;\n        document.title = this.originalTitle;\n\n        // Возвращаем обычный favicon\n        this.updateFavicon(false);\n      }\n    },\n    updateFavicon(showNotification) {\n      const favicon = document.querySelector('link[rel=\"icon\"]');\n      if (!favicon) return;\n      if (showNotification) {\n        // Сохраняем оригинальный favicon, если еще не сохранен\n        if (!favicon.dataset.original) {\n          favicon.dataset.original = favicon.href;\n        }\n\n        // Здесь можно использовать готовый favicon с уведомлением\n        // или создать его динамически с помощью canvas\n        favicon.href = '/favicon-notification.ico'; // Путь к favicon с уведомлением\n      } else if (favicon.dataset.original) {\n        // Возвращаем оригинальный favicon\n        favicon.href = favicon.dataset.original;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axiosInstance","emojiCategories","name","props","receiverId","type","String","Number","required","data","messages","newMessage","loading","receiver","polling","minimized","showDeleteModal","messageToDelete","showMentionPopup","mentionFilter","mentionStartIndex","activeUsers","showEmojiPicker","currentCategory","selectedFiles","notificationSound","unreadMessagesCount","originalTitle","document","title","titleInterval","computed","currentUserId","$store","state","auth","userId","filteredUsers","filter","toLowerCase","user","username","includes","currentEmojis","emojis","created","loadReceiverInfo","loadMessages","loadActiveUsers","startPolling","Audio","beforeUnmount","stopPolling","clearTitleNotification","methods","response","get","error","console","headers","newMessages","msg","some","existingMsg","id","sender_id","length","playNotificationSound","showTitleNotification","unreadMessages","receiver_id","is_read","markAsRead","isFirstLoad","$nextTick","scrollToBottom","sendMessage","trim","attachments","formData","FormData","forEach","file","append","post","messageData","content","parseInt","alert","detail","message","setInterval","clearInterval","container","$refs","messagesContainer","scrollTop","scrollHeight","formatDate","dateStr","date","Date","toLocaleString","hour","minute","toggleMinimize","markAllAsRead","closeChat","$emit","confirmDelete","cancelDelete","deleteMessage","delete","handleInput","event","text","target","value","lastAtIndex","lastIndexOf","slice","closeMentionPopup","handleKeydown","key","selectMention","beforeMention","afterMention","messageInput","focus","handleFileSelect","files","Array","from","removeFile","index","splice","fileInput","formatFileSize","bytes","toFixed","toggleEmojiPicker","addEmoji","emoji","cursorPosition","selectionStart","textBeforeCursor","textAfterCursor","newPosition","setSelectionRange","messageId","put","currentTime","play","updateFavicon","showNotification","favicon","querySelector","dataset","original","href"],"sources":["/home/dotcore/ichat/frontend/src/components/PopupChat.vue"],"sourcesContent":["<template>\n  <div class=\"popup-chat\" :class=\"{ minimized }\">\n    <div class=\"chat-header\" @click=\"toggleMinimize\">\n      <div class=\"user-info\">\n        <div v-if=\"receiver.avatar_url\" class=\"user-avatar\">\n          <img :src=\"`http://localhost:8000${receiver.avatar_url}`\" alt=\"Аватар\">\n        </div>\n        <div v-else class=\"user-avatar default-avatar\">\n          <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n          </svg>\n        </div>\n        <span class=\"username\">{{ receiver.username }}</span>\n      </div>\n      <div class=\"chat-controls\">\n        <button class=\"minimize-btn\">\n          {{ minimized ? '△' : '▽' }}\n        </button>\n        <button class=\"close-btn\" @click.stop=\"closeChat\">✕</button>\n      </div>\n    </div>\n\n    <div v-if=\"!minimized\" class=\"chat-content\">\n      <div class=\"messages\" ref=\"messagesContainer\">\n        <div v-for=\"message in messages\" :key=\"message.id\" \n             :class=\"['message', { 'own-message': message.sender_id === currentUserId }]\">\n          <div class=\"message-content\">{{ message.content }}</div>\n          <div class=\"message-info\">\n            <span class=\"timestamp\">{{ formatDate(message.created_at) }}</span>\n            <button \n              class=\"delete-btn\"\n              @click=\"confirmDelete(message)\"\n            >\n              ✕\n            </button>\n            <span v-if=\"message.sender_id === currentUserId\" class=\"read-status\">\n              {{ message.is_read ? '✓✓' : '✓' }}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"input-area\">\n        <div v-if=\"showEmojiPicker\" class=\"emoji-picker\" ref=\"emojiPicker\">\n          <div class=\"emoji-categories\">\n            <button \n              v-for=\"(category, name) in emojiCategories\" \n              :key=\"name\"\n              @click=\"currentCategory = name\"\n              :class=\"{ active: currentCategory === name }\"\n            >\n              {{ category.icon }}\n            </button>\n          </div>\n          <div class=\"emoji-list\">\n            <button \n              v-for=\"emoji in currentEmojis\" \n              :key=\"emoji\"\n              @click=\"addEmoji(emoji)\"\n              class=\"emoji-button\"\n            >\n              {{ emoji }}\n            </button>\n          </div>\n        </div>\n\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n          <div v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-preview\">\n            <i class=\"fas fa-paperclip\"></i>\n            <span class=\"file-name\">{{ file.name }}</span>\n            <span class=\"file-size\">({{ formatFileSize(file.size) }})</span>\n            <button class=\"remove-file\" @click=\"removeFile(index)\">✕</button>\n          </div>\n        </div>\n\n        <div class=\"input-wrapper\">\n          <input \n            v-model=\"newMessage\" \n            @keyup.enter=\"sendMessage\"\n            @input=\"handleInput\"\n            @keydown=\"handleKeydown\"\n            placeholder=\"Введите сообщение...\"\n            :disabled=\"loading\"\n            ref=\"messageInput\"\n          >\n          <label class=\"attachment-trigger\" title=\"Прикрепить файлы\">\n            <i class=\"fas fa-paperclip\"></i>\n            <input \n              type=\"file\" \n              multiple \n              @change=\"handleFileSelect\" \n              ref=\"fileInput\"\n              accept=\"*/*\"\n              style=\"display: none;\"\n            >\n          </label>\n          <span \n            class=\"emoji-trigger\"\n            @click.stop=\"toggleEmojiPicker\"\n            title=\"Добавить эмодзи\"\n          >\n            <i class=\"far fa-smile\"></i>\n          </span>\n        </div>\n\n        <button \n          @click=\"sendMessage\" \n          :disabled=\"(newMessage.trim() === '' && selectedFiles.length === 0) || loading\"\n        >\n          <i class=\"fas fa-paper-plane\"></i>\n        </button>\n      </div>\n    </div>\n\n    <!-- Модальное окно подтверждения удаления -->\n    <div v-if=\"showDeleteModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h3>Подтверждение удаления</h3>\n        <p>Вы действительно хотите удалить это сообщение?</p>\n        <p class=\"warning\">Сообщение будет удалено для всех участников переписки</p>\n        <div class=\"modal-buttons\">\n          <button @click=\"deleteMessage\" class=\"delete-confirm-btn\">Удалить</button>\n          <button @click=\"cancelDelete\" class=\"cancel-btn\">Отмена</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { axiosInstance } from '../store/modules/auth'\nimport { emojiCategories } from '../utils/emojis'\n\nexport default {\n  name: 'PopupChat',\n  props: {\n    receiverId: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  data() {\n    return {\n      messages: [],\n      newMessage: '',\n      loading: false,\n      receiver: {},\n      polling: null,\n      minimized: false,\n      showDeleteModal: false,\n      messageToDelete: null,\n      showMentionPopup: false,\n      mentionFilter: '',\n      mentionStartIndex: -1,\n      activeUsers: [],\n      showEmojiPicker: false,\n      currentCategory: 'smileys',\n      emojiCategories,\n      selectedFiles: [],\n      notificationSound: null,\n      unreadMessagesCount: 0,\n      originalTitle: document.title,\n      titleInterval: null\n    }\n  },\n  computed: {\n    currentUserId() {\n      return this.$store.state.auth.userId\n    },\n    filteredUsers() {\n      if (!this.mentionFilter) return this.activeUsers\n      const filter = this.mentionFilter.toLowerCase()\n      return this.activeUsers.filter(user => \n        user.username.toLowerCase().includes(filter)\n      )\n    },\n    currentEmojis() {\n      return this.emojiCategories[this.currentCategory].emojis\n    }\n  },\n  async created() {\n    await this.loadReceiverInfo()\n    await this.loadMessages()\n    await this.loadActiveUsers()\n    this.startPolling()\n    this.notificationSound = new Audio('/sounds/notification.mp3')\n    this.originalTitle = document.title\n  },\n  beforeUnmount() {\n    this.stopPolling()\n    this.clearTitleNotification()\n  },\n  methods: {\n    async loadReceiverInfo() {\n      try {\n        const response = await axiosInstance.get(`/users/${this.receiverId}`)\n        this.receiver = response.data\n      } catch (error) {\n        console.error('Error loading receiver info:', error)\n      }\n    },\n    async loadMessages() {\n      try {\n        const response = await axiosInstance.get(\n          `/private-messages/${this.receiverId}`, \n          { \n            headers: {\n              'X-Current-User-Id': this.currentUserId\n            }\n          }\n        )\n        \n        // Проверяем, есть ли новые сообщения\n        const newMessages = response.data.filter(\n          msg => !this.messages.some(existingMsg => existingMsg.id === msg.id) && \n                msg.sender_id !== this.currentUserId\n        )\n        \n        // Если есть новые сообщения и чат не активен, воспроизводим звук\n        if (newMessages.length > 0 && this.minimized) {\n          this.playNotificationSound()\n          this.showTitleNotification()\n        }\n        \n        this.messages = response.data\n        \n        // Отмечаем непрочитанные сообщения как прочитанные, если чат открыт\n        if (!this.minimized) {\n          const unreadMessages = this.messages.filter(\n            msg => msg.receiver_id === this.currentUserId && !msg.is_read\n          )\n          \n          for (const msg of unreadMessages) {\n            await this.markAsRead(msg.id)\n          }\n          \n          // Если чат открыт и мы прочитали сообщения, убираем уведомление\n          if (unreadMessages.length > 0) {\n            this.clearTitleNotification()\n          }\n        } else {\n          // Если чат свернут, считаем непрочитанные сообщения\n          this.unreadMessagesCount = this.messages.filter(\n            msg => msg.receiver_id === this.currentUserId && !msg.is_read\n          ).length\n        }\n        \n        // Прокручиваем к последнему сообщению при первой загрузке\n        if (this.isFirstLoad) {\n          this.$nextTick(() => {\n            this.scrollToBottom()\n            this.isFirstLoad = false\n          })\n        }\n      } catch (error) {\n        console.error('Error loading messages:', error)\n      }\n    },\n    async sendMessage() {\n      if ((this.newMessage.trim() === '' && this.selectedFiles.length === 0) || this.loading) {\n        return\n      }\n      \n      this.loading = true\n      \n      try {\n        // Сначала загружаем файлы, если они есть\n        let attachments = []\n        if (this.selectedFiles.length > 0) {\n          const formData = new FormData()\n          this.selectedFiles.forEach(file => {\n            formData.append('files', file)\n          })\n          \n          const response = await axiosInstance.post('/private-messages/attachments', formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n              'X-Current-User-Id': this.currentUserId\n            }\n          })\n          \n          attachments = response.data.attachments\n        }\n        \n        // Затем отправляем сообщение с вложениями\n        const messageData = {\n          content: this.newMessage.trim(),\n          receiver_id: parseInt(this.receiverId),\n          attachments: attachments\n        }\n        \n        await axiosInstance.post('/private-messages', messageData, {\n          headers: {\n            'X-Current-User-Id': this.currentUserId\n          }\n        })\n        \n        // Очищаем поле ввода и список файлов\n        this.newMessage = ''\n        this.selectedFiles = []\n        \n        // Обновляем список сообщений\n        await this.loadMessages()\n        \n        // Прокручиваем к последнему сообщению\n        this.$nextTick(() => {\n          this.scrollToBottom()\n        })\n      } catch (error) {\n        console.error('Error sending message:', error)\n        alert('Ошибка при отправке сообщения: ' + (error.response?.data?.detail || error.message))\n      } finally {\n        this.loading = false\n      }\n    },\n    startPolling() {\n      this.polling = setInterval(this.loadMessages, 3000)\n    },\n    stopPolling() {\n      if (this.polling) {\n        clearInterval(this.polling)\n        this.polling = null\n      }\n    },\n    scrollToBottom() {\n      const container = this.$refs.messagesContainer\n      if (container) {\n        container.scrollTop = container.scrollHeight\n      }\n    },\n    formatDate(dateStr) {\n      if (!dateStr) return ''\n      const date = new Date(dateStr)\n      return date.toLocaleString('ru-RU', {\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n    },\n    toggleMinimize() {\n      this.minimized = !this.minimized\n      \n      // Если открываем чат, отмечаем сообщения как прочитанные\n      if (!this.minimized) {\n        this.markAllAsRead()\n        this.clearTitleNotification()\n      }\n    },\n    closeChat() {\n      this.$emit('close')\n    },\n    confirmDelete(message) {\n      this.messageToDelete = message\n      this.showDeleteModal = true\n    },\n    cancelDelete() {\n      this.messageToDelete = null\n      this.showDeleteModal = false\n    },\n    async deleteMessage() {\n      if (!this.messageToDelete) return\n\n      try {\n        await axiosInstance.delete(\n          `/private-messages/${this.messageToDelete.id}`,\n          {\n            headers: {\n              'X-Current-User-Id': this.currentUserId\n            }\n          }\n        )\n        await this.loadMessages()\n        this.showDeleteModal = false\n        this.messageToDelete = null\n      } catch (error) {\n        console.error('Error deleting message:', error)\n      }\n    },\n    async loadActiveUsers() {\n      try {\n        const response = await axiosInstance.get('/users/active')\n        this.activeUsers = response.data\n      } catch (error) {\n        console.error('Error loading active users:', error)\n      }\n    },\n    handleInput(event) {\n      const text = event.target.value\n      const lastAtIndex = text.lastIndexOf('@')\n      \n      if (lastAtIndex !== -1 && (lastAtIndex === 0 || text[lastAtIndex - 1] === ' ')) {\n        this.mentionStartIndex = lastAtIndex\n        this.mentionFilter = text.slice(lastAtIndex + 1)\n        this.showMentionPopup = true\n      } else if (this.showMentionPopup && this.mentionStartIndex !== -1) {\n        this.mentionFilter = text.slice(this.mentionStartIndex + 1)\n        if (!this.mentionFilter || text[this.mentionStartIndex] !== '@') {\n          this.closeMentionPopup()\n        }\n      }\n    },\n    handleKeydown(event) {\n      if (!this.showMentionPopup) return\n\n      if (event.key === 'Escape') {\n        this.closeMentionPopup()\n      }\n    },\n    selectMention(user) {\n      const beforeMention = this.newMessage.slice(0, this.mentionStartIndex)\n      const afterMention = this.newMessage.slice(this.mentionStartIndex + this.mentionFilter.length + 1)\n      this.newMessage = `${beforeMention}@${user.username} ${afterMention}`\n      this.closeMentionPopup()\n      this.$refs.messageInput.focus()\n    },\n    closeMentionPopup() {\n      this.showMentionPopup = false\n      this.mentionFilter = ''\n      this.mentionStartIndex = -1\n    },\n    handleFileSelect(event) {\n      const files = Array.from(event.target.files)\n      if (files.length > 3) {\n        alert('Можно прикрепить максимум 3 файла')\n        return\n      }\n      this.selectedFiles = files\n    },\n    removeFile(index) {\n      this.selectedFiles.splice(index, 1)\n      if (this.selectedFiles.length === 0) {\n        this.$refs.fileInput.value = ''\n      }\n    },\n    formatFileSize(bytes) {\n      if (bytes < 1024) return bytes + ' B'\n      else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB'\n      else return (bytes / 1048576).toFixed(1) + ' MB'\n    },\n    toggleEmojiPicker() {\n      this.showEmojiPicker = !this.showEmojiPicker\n    },\n    addEmoji(emoji) {\n      const cursorPosition = this.$refs.messageInput.selectionStart\n      const textBeforeCursor = this.newMessage.slice(0, cursorPosition)\n      const textAfterCursor = this.newMessage.slice(cursorPosition)\n      this.newMessage = textBeforeCursor + emoji + textAfterCursor\n      \n      this.$nextTick(() => {\n        const newPosition = cursorPosition + emoji.length\n        this.$refs.messageInput.setSelectionRange(newPosition, newPosition)\n        this.$refs.messageInput.focus()\n      })\n\n      this.showEmojiPicker = false\n    },\n    async markAsRead(messageId) {\n      try {\n        await axiosInstance.put(\n          `/private-messages/${messageId}/read`,\n          null,\n          {\n            headers: {\n              'X-Current-User-Id': this.currentUserId\n            }\n          }\n        )\n        await this.loadMessages()\n      } catch (error) {\n        console.error('Error marking message as read:', error)\n      }\n    },\n    async markAllAsRead() {\n      const unreadMessages = this.messages.filter(\n        msg => msg.receiver_id === this.currentUserId && !msg.is_read\n      )\n      \n      for (const msg of unreadMessages) {\n        await this.markAsRead(msg.id)\n      }\n      \n      this.unreadMessagesCount = 0\n    },\n    playNotificationSound() {\n      try {\n        this.notificationSound.currentTime = 0\n        this.notificationSound.play()\n      } catch (error) {\n        console.error('Error playing notification sound:', error)\n      }\n    },\n    showTitleNotification() {\n      if (this.titleInterval) return // Уже показывается\n      \n      this.titleInterval = setInterval(() => {\n        document.title = document.title === this.originalTitle \n          ? `(${this.unreadMessagesCount}) Новое сообщение` \n          : this.originalTitle\n      }, 1000)\n      \n      // Добавляем favicon с уведомлением\n      this.updateFavicon(true)\n    },\n    clearTitleNotification() {\n      if (this.titleInterval) {\n        clearInterval(this.titleInterval)\n        this.titleInterval = null\n        document.title = this.originalTitle\n        \n        // Возвращаем обычный favicon\n        this.updateFavicon(false)\n      }\n    },\n    updateFavicon(showNotification) {\n      const favicon = document.querySelector('link[rel=\"icon\"]')\n      if (!favicon) return\n      \n      if (showNotification) {\n        // Сохраняем оригинальный favicon, если еще не сохранен\n        if (!favicon.dataset.original) {\n          favicon.dataset.original = favicon.href\n        }\n        \n        // Здесь можно использовать готовый favicon с уведомлением\n        // или создать его динамически с помощью canvas\n        favicon.href = '/favicon-notification.ico' // Путь к favicon с уведомлением\n      } else if (favicon.dataset.original) {\n        // Возвращаем оригинальный favicon\n        favicon.href = favicon.dataset.original\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.popup-chat {\n  position: fixed;\n  bottom: 90px;\n  right: 20px;\n  width: 300px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  z-index: 998;\n}\n\n.chat-header {\n  padding: 10px;\n  background: #42b983;\n  color: white;\n  border-radius: 8px 8px 0 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  cursor: pointer;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.user-avatar {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  overflow: hidden;\n}\n\n.user-avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.default-avatar {\n  background-color: #e0e0e0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n}\n\n.default-avatar svg {\n  width: 20px;\n  height: 20px;\n  color: #757575;\n}\n\n.chat-controls {\n  display: flex;\n  gap: 5px;\n}\n\n.minimize-btn, .close-btn {\n  background: none;\n  border: none;\n  color: white;\n  cursor: pointer;\n  padding: 0 5px;\n}\n\n.chat-content {\n  height: 400px;\n  display: flex;\n  flex-direction: column;\n}\n\n.messages {\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.message {\n  max-width: 80%;\n  padding: 8px;\n  border-radius: 8px;\n  background: #f5f5f5;\n}\n\n.own-message {\n  align-self: flex-end;\n  background: #e3f2fd;\n}\n\n.message-content {\n  margin-bottom: 4px;\n  word-break: break-word;\n}\n\n.message-info {\n  display: flex;\n  justify-content: flex-end;\n  gap: 5px;\n  font-size: 0.8em;\n  color: #666;\n}\n\n.input-area {\n  padding: 10px;\n  border-top: 1px solid #eee;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  position: relative;\n}\n\n.input-wrapper {\n  display: flex;\n  gap: 8px;\n  position: relative;\n}\n\n.attachment-trigger {\n  position: absolute;\n  right: 40px;\n  top: 50%;\n  transform: translateY(-50%);\n  cursor: pointer;\n  color: #999;\n  transition: color 0.2s;\n  padding: 5px;\n}\n\n.attachment-trigger:hover {\n  color: #666;\n}\n\n.emoji-trigger {\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n  cursor: pointer;\n  color: #999;\n  transition: color 0.2s;\n  padding: 5px;\n}\n\n.emoji-trigger:hover {\n  color: #666;\n}\n\n.selected-files {\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  right: 0;\n  padding: 4px 8px;\n  background: #f8f9fa;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border: 1px solid #eee;\n  border-bottom: none;\n  font-size: 0.85em;\n}\n\n.file-preview {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  padding: 2px 0;\n  color: #666;\n}\n\n.file-preview i {\n  font-size: 0.9em;\n  color: #999;\n}\n\n.file-name {\n  max-width: 150px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.file-size {\n  color: #999;\n  font-size: 0.9em;\n}\n\n.remove-file {\n  background: none;\n  border: none;\n  color: #999;\n  cursor: pointer;\n  padding: 0;\n  font-size: 0.9em;\n  margin-left: auto;\n}\n\n.remove-file:hover {\n  color: #ff4444;\n}\n\n.emoji-picker {\n  position: absolute;\n  bottom: 100%;\n  right: 0;\n  background: white;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n}\n\n.emoji-categories {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 6px;\n  padding-bottom: 6px;\n  border-bottom: 1px solid #eee;\n}\n\n.emoji-categories button {\n  background: none;\n  border: none;\n  padding: 2px;\n  cursor: pointer;\n  font-size: 1em;\n  opacity: 0.6;\n  transition: opacity 0.2s;\n}\n\n.emoji-categories button:hover,\n.emoji-categories button.active {\n  opacity: 1;\n}\n\n.emoji-list {\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: 1px;\n  max-height: 150px;\n  overflow-y: auto;\n  padding: 2px;\n}\n\n.emoji-button {\n  background: none;\n  border: none;\n  padding: 2px;\n  cursor: pointer;\n  font-size: 1.2em;\n  transition: opacity 0.2s;\n  opacity: 0.8;\n}\n\n.emoji-button:hover {\n  opacity: 1;\n}\n\n.minimized {\n  height: auto;\n}\n\n.minimized .chat-content {\n  display: none;\n}\n\n.read-status {\n  color: #42b983;\n}\n\n.delete-btn {\n  background: none;\n  border: none;\n  color: #999;\n  cursor: pointer;\n  padding: 0 5px;\n  font-size: 1.2em;\n  line-height: 1;\n  opacity: 0;\n  transition: opacity 0.2s;\n}\n\n.message:hover .delete-btn {\n  opacity: 1;\n}\n\n.delete-btn:hover {\n  color: #ff4444;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1100;\n}\n\n.modal-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  width: 300px;\n  text-align: center;\n}\n\n.warning {\n  color: #ff4444;\n  font-size: 0.9em;\n  margin: 10px 0;\n}\n\n.modal-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.delete-confirm-btn {\n  background: #ff4444;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.delete-confirm-btn:hover {\n  background: #ff2222;\n}\n\n.cancel-btn {\n  background: #666;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.cancel-btn:hover {\n  background: #555;\n}\n\n.mention-popup {\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  width: 200px;\n  max-height: 200px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);\n  overflow-y: auto;\n  z-index: 1000;\n}\n\n.mention-item {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 8px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.mention-item:hover {\n  background-color: #f5f5f5;\n}\n\n.mention-avatar {\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  overflow: hidden;\n}\n\n.mention-avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.mention-username {\n  font-size: 0.9em;\n  color: #333;\n}\n\n.message-attachments {\n  margin-top: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.attachment {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 12px;\n  background: #f8f9fa;\n  border-radius: 4px;\n  font-size: 0.9em;\n  transition: background-color 0.2s;\n}\n\n.attachment:hover {\n  background: #e9ecef;\n}\n\n.attachment i {\n  color: #6c757d;\n  font-size: 1.1em;\n}\n\n.attachment-link {\n  color: #0066cc;\n  text-decoration: none;\n  flex-grow: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.attachment-link:hover {\n  text-decoration: underline;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}